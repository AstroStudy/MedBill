


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ganesh Software Solutions</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Inter', sans-serif;
        }
 		
        :root {
            --primary: #1e5f8c;    /* Darker blue (replaces #2c7a5a) */
	    --secondary: #2a7fbf;  /* Medium blue (replaces #3daa7d) */
	    --light: #f0f7fc;      /* Very light blue (replaces #f0f7f4) */
	    --dark: #1a3a5f;       /* Navy blue (replaces #1e3f34) */
	    --accent: #ff6b35;     /* Keeping the same orange accent */
	    --border: #d1e0ed;     /* Light blue border (replaces #d1e5dc) */
        }
	

	body::before {
	    content: "";
	    position: fixed;
	    top: 0; 
	    left: 0;
	    right: 0;
	    bottom: 0;
	    border: 4px double #000; /* Double border for each printed page */
	    pointer-events: none;
	    z-index: 9999;
	}

        body {
            background: linear-gradient(135deg, #f0f7f4 0%, #e1f0e9 100%); 
            height: 100%; /* Changed height to min-height: 100vh */
            display: flex;
	    justify-content: center;
	    align-items: flex-start;
            color: var(--dark);
            font-size: 14px;
            line-height: 1.0; height: auto !important; margin: 0 !important;
        }


        /* Navigation sidebar */
        .sidebar {
            width: 200px; height: 100vh;
            background: var(--dark);
            color: white;
            padding: 20px 0;
            box-shadow: 3px 0 10px rgba(0,0,0,0.1);
            display: flex;
            flex-direction: column;
        }


        .logo-container {
            padding: 0 20px 10px;
            border-bottom: 1px solid rgba(255,255,255,0.1);
            margin-bottom: 20px;
            text-align: center;
        }

        .logo {
            font-size: 16px;
            font-weight: 700;
            color: white; margin-top: 0;
            margin-bottom: 5px;
        }

        .logo-sub {
            font-size: 12px;
            opacity: 0.8;
        }

        .nav-btn {
            display: flex;
            align-items: center;
            padding: 12px 24px;
            margin: 5px 10px;
            background: transparent;
            color: rgba(255,255,255,0.8);
            border: none;
            border-radius: 5px;
            cursor: pointer;
            text-align: left;
            font-size: 14px;
            transition: all 0.3s ease;
        }



        #clear-all-btn.disabled {
	    opacity: 0.5;
	    cursor: not-allowed;
	    pointer-events: none;
	}





        .nav-btn i {
            margin-right: 12px;
            font-size: 16px;
            width: 24px;
            text-align: center;
        }

        .nav-btn:hover {
            background: rgba(255,255,255,0.1);
            color: white;
        }

        .nav-btn.active {
            background: var(--primary);
            color: white;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }

        /* Main content area */
        .main-content {
            flex: none ; transform: none;
            padding: 1px; 
            overflow-y: auto;
            display: block;            
        }

        .page-title {
            font-size: 8px; width: 100% ;
            font-weight: 700; text-align: center;
            color: var(--dark);
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: var(--secondary);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
        }

        /* Common styles for containers */
        .container {transform: none;
            background: white; width: 70%; 
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.05);
            padding: 10px;
            margin: 10px 30px 0 10px !important;  
        }

        .invoice-container {
	    width: 8.27in; transform: none;    
	    background: white;
	    height: 100%;
	    margin: 0 40px 0 10px !important;
	    padding: 0 8px;
	    box-sizing: border-box;
	    page-break-after: avoid;
	    page-break-inside: avoid;
	    font-size: 12px;
	}

        /* Invoice Header */
        .invoice-header {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
            margin-bottom: 0px; margin-left: 3px;
            padding-bottom: 0px;
            gap: 15px;
        }

        .vendor-info {
            max-width: 100%; /* Adjusted width for better layout with customer details */
            font-size: 11px; 
            line-height: 1.1;margin-left: 8px;
            /* UPDATED: Reduced border thickness and vertical padding */
            border: 2px solid var(--border); 
            border-radius: 2px;
            padding: 0px 0 !important; /* Reduced from 2px 0 */
            margin-bottom: 0 !important;
        }

        .vendor-name {
            font-size: 14px;
            font-weight: 700;
            color: var(--primary);
            margin-bottom: 4px;
        }

        .invoice-meta {
            width: 35%;
            text-align: right;
            font-size: 11px;
            border: 1px solid var(--border);
            border-radius: 5px;
            padding: 8px;
        }

        .invoice-title {
            text-align: center;
            font-size: 8px;
            font-weight: 700;
            color: var(--primary);
            margin-top: 4px;
            padding: 4px;
            background: rgba(61, 170, 125, 0.1);
            border-radius: 4px;
        }

        /* Customer Details - New Compact Layout */
        .customer-details-section {
            display: flex;
            justify-content: space-between;
            gap: 10px;
            margin-bottom: 0 !important;
        }

        .customer-box {
            flex: 1; 
            /* UPDATED: Reduced border thickness and vertical padding */
            border: 2px solid var(--border); 
            margin-right: 8px;
            border-radius: 2px;
            padding: 0 !important;
            font-size: 11px;
        }

        .customer-box-header {
            font-weight: 700;margin-bottom: 0 !important;
            margin-bottom: 2px !important;
            color: var(--primary);
            font-size: 8px;
        }

        .customer-inputs {
            display: flex;
            flex-direction: column;
            gap: 2px;
        }

        .customer-inputs input {
            width: 100%; margin: 0 !important;       /* Remove default input margins */    		
            padding: 4px 8px !important; /* Adjust padding for compactness */
            border: 1px solid var(--border);
            border-radius: 4px;
            font-size: 10px;
        }



	/* Customer form styles */
	.license-entry {
	    display: flex;
	    gap: 8px;
	    margin-bottom: 8px;
	    align-items: center;
	}

	.license-entry input {
	    flex: 1;
	    padding: 6px;
	    font-size: 12px;
	}

	.btn-small {
	    padding: 5px 10px;
	    font-size: 12px;
	}





        .invoice-info-box {
            width: 100%; /* Changed to 100% to take full width */
            display: flex; margin-bottom: 6px;  align-items: center;        
            justify-content: center;
            gap: 30px;
            border-radius: 0px;
            padding: 0;
            flex-wrap: nowrap;
            font-size: 10px; line-height: 0;
        }

        /* Medicine Table */
        .medicine-table {
            width: 100%; flex-wrap: wrap;
            border-collapse: collapse;
            margin: 0; 
            font-size: 10px;
            table-layout: fixed; 
        }



	.suggestions-container {
	        position: relative;
	        display: inline-block;
	        width: 100%;
	    }
    
	.suggestions-list {
		position: absolute;
	        z-index: 1000;
	        width: 100%;
	        max-height: 200px;
	        overflow-y: auto;
	        background: white;
	        border: 1px solid var(--border);
	        border-radius: 4px;
	        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
	        display: none;
	    }
    
	.suggestion-item {
	        padding: 8px;
	        cursor: pointer;
	        border-bottom: 1px solid var(--border);
	    }
    
    	.suggestion-item:hover {
	        background-color: var(--light);
	    }
    
	.suggestion-item.highlighted {
	        background-color: var(--primary);
	        color: white;
	    }



        .medicine-table th {
            background: var(--primary);
            color: white;
            padding: 5px 3px;
            text-align: left;
            font-weight: 600;
            font-size: 10px;
        }

        .medicine-table td {
            padding: 5px 3px;
            border-bottom: 1px solid var(--border);
            font-size: 10px;
            height: 25px;
        }

        .medicine-table input {
            width: 100%;
            padding: 3px;
            border: none;
            background: transparent;
            font-size: 10px;
        }

        .medicine-table select {
            width: 100%;
            padding: 3px;
            border: 1px solid var(--border);
            border-radius: 3px;
            background: white;
            font-size: 10px;
        }

        .action-buttons {
            display: flex;
            justify-content: flex-end;
            margin: 0 !important;
	    padding: 0 !important;
        }

        .btn {
            background: var(--primary);
            color: white;
            border: none; margin: 0 !important;
            padding: 6px 12px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 11px;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 4px;
            transition: all 0.3s ease;
        }

        .btn:hover {
            background: var(--secondary);
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

        .btn-remove {
            background: #e74c3c;
            padding: 3px 8px;
            font-size: 10px;
        }

        .btn-remove:hover {
            background: #c0392b;
        }

        /* Totals and Payment */
        .totals-section {
            display: flex;
            justify-content: space-between;
            margin-top: 4px;
        }

        .payment-info {
            width: 60%;
        }

        .payment-mode {
            font-size: 11px;
            margin-bottom: 0;
        }

        .payment-mode select {
            width: 100%;
            padding: 6px;
            border: 1px solid var(--border);
            border-radius: 4px;
            font-size: 10px;
        }

        .bank-details {
            margin-top: 4px;
            padding: 4px;
            background: rgba(240, 247, 244, 0.5);
            border-radius: 5px;
            font-size: 10px;
            display: flex;
            justify-content: space-between;
            line-height: 1.4;
        }

        .bank-info {
            flex: 1;
        }

        .qr-code {
            width: 68px;
            height: 68px;
            background: #f8f8f8;
            display: flex;
            align-items: center;
            justify-content: center;
            border: 1px solid var(--border);
            border-radius: 5px;
            margin-left: 10px;
        }

        .qr-code img { /* Added style for the image */
            max-width: 100%;
            max-height: 100%;
            display: block;
        }

        .qr-code-placeholder {
            color: #999;
            text-align: center;
            padding: 5px;
            font-size: 8px;
        }

        .totals {
            width: 35%;
        }

        .totals table {
            width: 100%;
            font-size: 10px;
        }

        .totals td {
            padding: 4px 0;
        }

        .totals tr:last-child td {
            font-weight: 700;
            font-size: 10px;
            border-top: 2px solid var(--border);
            padding-top: 6px;
        }

        /* Footer */
        .invoice-footer {
            display: flex;
            justify-content: space-between;
            margin-top: 0; margin-bottom: 0;
            padding-top: 0;
            border-top: 1px solid var(--border);
            font-size: 10px;
            line-height: 1.4;
        }

        .declaration {
            width: 70%; hieght: 30%;margin-bottom: 0;
        }

        .declaration ul {
            margin-top: 0; margin-bottom: 0;
            padding-left: 15px;
            font-size: 9px;
        }

        .signature {
            width: 50%;
            text-align: center; margin-bottom :0px !important;
        }

        .signature-line {
            border-top: 1px solid var(--dark);
            width: 100%;
            margin: 15px auto 3px;
        }

        /* Purchases Form */
        .purchase-form {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 12px;
            margin-bottom: 15px; 
        }

        .form-group {
            margin-bottom: 8px;
        }

        .form-group label {
            display: block;
            font-weight: 600;
            margin-bottom: 4px;
            color: var(--dark);
            font-size: 13px;
        }

        .form-group input, 
        .form-group select {
            width: 100%;
            padding: 8px;
            border: 1px solid var(--border);
            border-radius: 5px;
            font-size: 13px;
        }

        /* Report Section */
        .report-controls {
            display: flex;
            gap: 12px;
            margin-bottom: 4px;
            flex-wrap: wrap;
        }

        .date-filter {
            display: flex; 
            gap: 8px;
            align-items: center;
            background: var(--light);
            padding: 8px 12px;
            border-radius: 5px;
            flex: 1;
        }

        .date-filter label {
            font-weight: 600;
            white-space: nowrap;
            font-size: 13px;
        }

        .date-filter input {
            padding: 7px 10px;
            border: 1px solid var(--border);
            border-radius: 4px;
            font-size: 13px;
        }

        .report-actions {
            display: flex;
            gap: 8px;
        }

        .btn-print {
            background: #3498db;
        }

        .btn-csv {
            background: #2a7fbf;
        }

        .report-type-selector {
            margin-bottom: 4px;
            padding: 8px 0;
        }

        .report-type-selector label {
            margin-right: 15px;
            font-weight: 600;
            font-size: 13px;
        }

        /* Column widths for perfect fit */
        /* Updated column widths for Invoice and Purchases table */
        .col-no { width: 3%; }
        .col-name { width: 18%; } 
        .col-mfr { width: 6%; } 
        .col-hsn { width: 6%; } 
        .col-batch { width: 7%; } 
        .col-expiry { width: 5%; }
        .col-qty { width: 6%; }
        .col-rate { width: 7%; }
        .col-disc { width: 6%; } 
        .col-cgst { width: 6%; } 
        .col-sgst { width: 6%; } 
        .col-igst { width: 6%; } 
        .col-amount { width: 11%; }
        .col-action { width: 2%; }

        /* New styles for report tables to ensure column alignment */
        /* Specific column widths for Sales Report */
        #report-page .medicine-table th:nth-child(1), #report-page .medicine-table td:nth-child(1) { width: 3%; } /* No */
        #report-page .medicine-table th:nth-child(2), #report-page .medicine-table td:nth-child(2) { width: 8%; } /* Bill No / Inv No */
        #report-page .medicine-table th:nth-child(3), #report-page .medicine-table td:nth-child(3) { width: 8%; } /* Date */
        #report-page .medicine-table th:nth-child(4), #report-page .medicine-table td:nth-child(4) { width: 12%; } /* Customer / Vendor */
        #report-page .medicine-table th:nth-child(5), #report-page .medicine-table td:nth-child(5) { width: 18%; } /* Medicine Name */
        #report-page .medicine-table th:nth-child(6), #report-page .medicine-table td:nth-child(6) { width: 5%; } /* MFR */
        #report-page .medicine-table th:nth-child(7), #report-page .medicine-table td:nth-child(7) { width: 5%; } /* HSN */
        #report-page .medicine-table th:nth-child(8), #report-page .medicine-table td:nth-child(8) { width: 7%; } /* Batch */
        #report-page .medicine-table th:nth-child(9), #report-page .medicine-table td:nth-child(9) { width: 5%; } /* Expiry */
        #report-page .medicine-table th:nth-child(10), #report-page .medicine-table td:nth-child(10) { width: 5%; } /* Qty */
        #report-page .medicine-table th:nth-child(11), #report-page .medicine-table td:nth-child(11) { width: 6%; } /* Rate */
        #report-page .medicine-table th:nth-child(12), #report-page .medicine-table td:nth-child(12) { width: 5%; } /* Disc. */
        #report-page .medicine-table th:nth-child(13), #report-page .medicine-table td:nth-child(13) { width: 6%; } /* CGST% */
        #report-page .medicine-table th:nth-child(14), #report-page .medicine-table td:nth-child(14) { width: 6%; } /* SGST% */
        #report-page .medicine-table th:nth-child(15), #report-page .medicine-table td:nth-child(15) { width: 6%; } /* IGST% */
        #report-page .medicine-table th:nth-child(16), #report-page .medicine-table td:nth-child(16) { width: 10%; } /* Amount */

        /* Specific column widths for Stock Report */
        #report-page .medicine-table.stock-report th:nth-child(1), 
#report-page .medicine-table.stock-report td:nth-child(1) { width: 5%; } /* No */
#report-page .medicine-table.stock-report th:nth-child(2), 
#report-page .medicine-table.stock-report td:nth-child(2) { width: 25%; } /* Medicine */
#report-page .medicine-table.stock-report th:nth-child(3), 
#report-page .medicine-table.stock-report td:nth-child(3) { width: 8%; } /* MFR */
#report-page .medicine-table.stock-report th:nth-child(4), 
#report-page .medicine-table.stock-report td:nth-child(4) { width: 8%; } /* HSN */
#report-page .medicine-table.stock-report th:nth-child(5), 
#report-page .medicine-table.stock-report td:nth-child(5) { width: 12%; } /* Batch */
#report-page .medicine-table.stock-report th:nth-child(6), 
#report-page .medicine-table.stock-report td:nth-child(6) { width: 12%; } /* Expiry */
#report-page .medicine-table.stock-report th:nth-child(7), 
#report-page .medicine-table.stock-report td:nth-child(7) { width: 10%; } /* Purchases */
#report-page .medicine-table.stock-report th:nth-child(8), 
#report-page .medicine-table.stock-report td:nth-child(8) { width: 10%; } /* Sales */
#report-page .medicine-table.stock-report th:nth-child(9), 
#report-page .medicine-table.stock-report td:nth-child(9) { width: 10%; } /* Current Stock */


        /* Print specific styles */
        @media print {

	html, body {
		    height: auto !important;
		    overflow: visible !important;
		    width: 100%; /* Ensure full width usage */
	            min-height: 0 !important; /* No minimum height forcing extra space */
        	    margin: 0 !important;
                    padding: 0 !important;
		    }


            body {
	        padding: 0; /* Changed from 12px 0 to 0 to remove extra top/bottom space */
	        margin: 0;
	        background: white;
	        font-size: 10px;
	        display: flex; /* Make the body a flex container */
	        justify-content: center; /* Center content horizontally within the body */
	        align-items: flex-start; /* Align items to the top, allowing pages to flow naturally */
	    }

           
            @page {
                margin: 3mm;  
            }

            .sidebar, .btn-add, .btn-remove, .no-print, #messageModal, #invoice-print-actions,  #batchSelectionModal {
                display: none !important;
            }

	    {
                display: none !important;
            }
            
            .main-content {
                padding: 0; transform-origin: top center; overflow: visible !important;
		flex: none !important; /* Do not take up flexible space */
                width: 100% !important; /* Ensure it takes full width */
                margin: 0 !important;
            }
            
            .invoice-container {
	        /* Keep existing necessary styles */
	        width: 100%; transform: scaleX(1.18) scaleY(1.0);
	        page-break-inside: avoid;
	        page-break-after: auto; min-height: auto !important;
	        box-shadow: none;
	        height: auto;
	        padding: 0  !important;
	        transform-origin: top center;
	        font-size: 9px !important;
	        margin: 0 auto !important; /* This will now effectively center the invoice container horizontally */
	    }

	    /* Aggressive line-height for all relevant text and input elements */
            p, li, div:not(.sidebar):not(.main-content):not(.invoice-container), span, 
            table, tbody, tr, td, th, h1, h2, h3, h4, h5, h6, input, select {
            line-height: 1.2 !important; /* Compress line height slightly for readability */
            }


	    .invoice-info-box {
		margin-top: 0 !important;
	        margin-bottom: 0 !important; /* Ensure no extra space at the very bottom */
	    }


	    .invoice-footer {
		margin-top: 0 !important;
	        margin-bottom: 0 !important; /* Ensure no extra space at the very bottom */
	    }
            
            .btn {
                display: none;
            }
            
            .medicine-table {
                font-size: 8px;
            }
            
            .medicine-table th, .medicine-table td {
                padding: 1px !important;
            }
            
            .medicine-table input, .medicine-table select {
                font-size: 8px;
                padding: 1px;
            }
            
            .invoice-title {
                font-size: 8px; width: 100%;
            }
            
            .vendor-info, .invoice-meta {
                font-size: 9px; width: 100%;
            }
            
            .customer-box-header {
                font-size: 9px;
            }
            
            .bank-details {
                font-size: 8px;
            }

	
	    .qr-code {
            	width: 68px;
	        height: 68px;
		}
            
            .totals table {
                font-size: 9px;
            }
            
            .declaration {
                font-size: 8px;
            }
            
            .declaration ul {
                font-size: 7px;
            }
        }

        /* Responsive adjustments */
        @media screen and (min-width: 0px) {
	    .invoice-container {
	        width: 100%;
	        max-width: 800px; /* or any fixed max width */
	        margin: 0 auto;    /* center horizontally */
	        padding: 15px;
        	box-sizing: border-box;
		}	
	    .sidebar {
                width: 180px; 
            }
            
            
        }

        @media (width: 100%) {
            body {
                flex-direction: column; aling: top center;
            }
            
            .sidebar {
                width: 100%;
                padding: 10px;
                flex-direction: row;
                flex-wrap: wrap;
                justify-content: center;
            }
            
            .logo-container {
                width: 100%;
                text-align: center;
                padding: 10px;
            }
            
            .nav-btn {
                margin: 1px;
                padding: 8px 15px;
                font-size: 13px;
            }
            
            .nav-btn i {
                margin-right: 1px;
            }
        }

        @media (max-width: 768px) {
            .customer-details-section {
                flex-direction: start-flex;
            }
            
            .customer-box, .invoice-info-box {
                width: 100%;
            }
            
            .purchase-form {
                grid-template-columns: 1fr;
            }
            
            .report-controls {
                flex-direction: column;
            }
            
            .medicine-table {
                font-size: 9px;
            }
            
            .col-name { width: 18%; }
            .col-mfr { width: 7%; }
            
            .bank-details {
                flex-direction: row;
            }
            
            .qr-code {
            	width: 68px;
	        height: 68px;
                margin: 2px 0 0 0; margin-left: 10px !important;margin-top: 0 !important;
                align-self: flex-start;
            }
        }
        
        /* New report styles */
        .report-total {
            margin-top: 10px;
            padding: 10px;
            background: rgba(61, 170, 125, 0.1);
            border-radius: 5px;
            font-weight: bold;
            text-align: right;
            font-size: 16px;
        }
        
        .date-filter.stock {
            display: none;
        }
        
        .report-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }
        
        .report-title {
            font-size: 18px;
            color: var(--primary);
            font-weight: 600;
        }

        /* Data Management Styles */
        .data-management-form {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-bottom: 10px;
        }

        .data-management-section {
            background: white;
            padding: 15px;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

        .data-management-section h3 {
            margin-bottom: 10px;
            color: var(--primary);
            border-bottom: 1px solid var(--border);
            padding-bottom: 8px;
        }

        .danger-zone {
            border: 2px solid #e74c3c;
            background-color: rgba(231, 76, 60, 0.05);
        }

        .danger-zone h3 {
            color: #e74c3c;
        }

        .btn-danger {
            background: #e74c3c;
        }

        .btn-danger:hover {
            background: #c0392b;
        }

        .form-row {
            margin-bottom: 12px;
        }

        .form-row label {
            display: block;
            margin-bottom: 5px;
            font-weight: 600;
            font-size: 13px;
        }

        .form-row input, 
        .form-row select {
            width: 100%;
            padding: 8px;
            border: 1px solid var(--border);
            border-radius: 4px;
            font-size: 13px;
        }

        /* Custom Modal Styles */
        .modal {
            display: none; /* Hidden by default */
            position: fixed; /* Stay in place */
            z-index: 1000; /* Sit on top */
            left: 0;margin-botton: 2px;
            top: 0;
            width: 100%; /* Full width */
            height: 100%; /* Full height */
            overflow: auto; /* Enable scroll if needed */
            background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            background-color: #fefefe;
            margin-botton: 2px;
            padding: 20px;
            border: 1px solid #888;
            border-radius: 8px;
            width: 80%;
            max-width: 400px;
            box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19);
            text-align: center;
        }

        .modal-header {
            padding: 10px 0;
            border-bottom: 1px solid #eee;
            margin-bottom: 10px; 
            font-size: 18px;
            font-weight: 600;
            color: var(--primary);
        }

        .modal-body {
            margin-bottom: 5px;
            font-size: 14px;
            line-height: 1.5;
        }

        .modal-footer button {
            background-color: var(--primary);
            color: white;
            padding: 8px 15px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            margin: 0 5px;
            transition: background-color 0.3s ease;
        }

        .modal-footer button:hover {
            background-color: var(--secondary);
        }

        .modal-footer .cancel-btn {
            background-color: #e74c3c;
        }

        .modal-footer .cancel-btn:hover {
            background-color: #c0392b;
        }

        /* Batch Selection Modal Specific Styles */
        #batchSelectionModal .modal-content {
            max-width: 600px;
        }

        #batchSelectionModal table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 15px;
        }

        #batchSelectionModal th, #batchSelectionModal td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
            font-size: 12px;
        }

        #batchSelectionModal th {
            background-color: var(--primary);
            color: white;
        }

        #batchSelectionModal tbody tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        #batchSelectionModal button.select-batch-btn {
            background-color: var(--secondary);
            padding: 5px 10px;
            font-size: 12px;
            border-radius: 4px;
        }

        #batchSelectionModal button.select-batch-btn:hover {
            background-color: #308060;
        }


.tracker-container {
            background: white;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.05);
            padding: 20px;
            margin: 20px auto;
            max-width: 1200px;
        }
        
        .tracker-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 1px solid var(--border);
        }
        
        .tracker-title {
            font-size: 22px;
            color: var(--primary);
            font-weight: 700;
        }
        
        .tracker-filters {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
            padding: 15px;
            background-color: var(--light);
            border-radius: 8px;
        }
        
        .filter-group {
            display: flex;
            flex-direction: column;
        }
        
        .filter-group label {
            font-weight: 600;
            margin-bottom: 5px;
            color: var(--dark);
            font-size: 13px;
        }
        
        .filter-group input,
        .filter-group select {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid var(--border);
            border-radius: 5px;
            font-size: 14px;
        }
        
        .filter-actions {
            display: flex; flex-wrap: wrap;flex: 1 1 100%; /* Each div takes full width, forcing a new line */
            gap: 10px; max-width: 100%; /* Ensures it doesn't exceed parent width */
            justify-content: flex-end;
            margin-top: 10px;
            
        }
        
        .tracker-table-container {
            overflow-x: auto;
        }
        
        .tracker-table {
            width: 100%;
            border-collapse: collapse;
            margin: 0;
            font-size: 13px;
        }
        
        .tracker-table th {
            background: var(--primary);
            color: white;
            padding: 10px;
            text-align: left;
            font-weight: 600;
            position: sticky;
            top: 0;
        }
        
        .tracker-table td {
            padding: 10px;
            border-bottom: 1px solid var(--border);
        }
        
        .tracker-table tr:nth-child(even) {
            background-color: rgba(240, 247, 252, 0.3);
        }
        
        .tracker-table tr:hover {
            background-color: rgba(42, 127, 191, 0.1);
        }
        
        .no-results {
            text-align: center;
            padding: 30px;
            color: #666;
            font-style: italic;
        }
        
        .tracker-summary {
            margin-top: 20px;
            padding: 15px;
            background-color: var(--light);
            border-radius: 8px;
            font-weight: 600;
            display: flex;
            justify-content: space-between;
        }
        
        /* Responsive adjustments */
        @media (max-width: 768px) {
            .tracker-filters {
                grid-template-columns: 1fr;
            }
            
            .tracker-header {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .tracker-title {
                margin-bottom: 15px;
            }
        }




    </style>
</head>
<body>
    <div class="sidebar">
        <div class="logo-container">
            <div class="logo">GANESH </div>
            <div class="logo-sub">Software Solutions</div>
        </div>
        <button class="nav-btn active" onclick="showPage('invoice-page')">
            <i class="fas fa-file-invoice"></i> Invoice
        </button>
        <button class="nav-btn" onclick="showPage('purchases-page')">
            <i class="fas fa-cart-plus"></i> Purchases
        </button>
        <button class="nav-btn" onclick="showPage('report-page')">
            <i class="fas fa-chart-bar"></i> Reports
        </button>
	
	<button class="nav-btn" onclick="showPage('tracker-page')"> 
		<i class="fas fa-search"></i> Tracker
	</button>

        <button class="nav-btn" onclick="showPage('data-management-page')">
            <i class="fas fa-database"></i> Data Management
        </button>
	
	<button class="nav-btn" onclick="clearAllData()" id="clear-all-btn" style="margin-top: auto; margin-bottom: 20px;">
	    <i class="fas fa-trash-alt"></i> Clear All
	</button>

    </div>
    
    <div class="main-content">                  
        <div id="invoice-page" class="page-content">
            <!-- New container for all buttons and input -->
            <div id="invoice-actions-top" class="no-print flex flex-wrap justify-center items-center p-1 gap-2 bg-gray-100 rounded-md mb-0">
                <!-- Print/Save Buttons -->
                <button class="btn" onclick="window.print()" style="background: #2a7fbf;">
                    <i class="fas fa-print"></i> Print Invoice
                </button>
                <button class="btn" onclick="saveSales()" style="background: #2a7fbf;">
                    <i class="fas fa-save"></i> Save Invoice
                </button>
                <button class="btn" onclick="printAndSaveSales()" style="background: #22a1e6;">
                    <i class="fas fa-print"></i> Print & Save
                </button>

                <!-- Add Medicine Button -->
                <button class="btn btn-add" onclick="addNewRow()">
                    <i class="fas fa-plus"></i> Add Medicine
                </button>

                <!-- Add New Customer Button -->
                <button class="btn btn-small" onclick="openCustomerForm()">
                    <i class="fas fa-plus"></i> Add New Customer
                </button>

                <!-- Load Invoice Button and Input -->
                <button class="btn" onclick="loadInvoiceByBillNumber()" style="background-color: #3498db;">
                    <i class="fas fa-search"></i> Load Invoice
                </button>
                <input type="text" id="search-bill-number" placeholder="Enter Bill No" class="p-1 text-sm border rounded w-auto">
            </div>

            <div class="container invoice-container">
                <div class="invoice-title" style="width:100%; text-align: center; color: black;"> This application is developed by <a href="https://kishoredvr.github.io/Exploring/" target="_blank" 			style="color: #22a1e6; font-weight: bold; font-size: 1.1em; text-decoration: none;"> Kishore DVR</a>.<span style="color: black;">To contact me</span> 
		  <a href="https://kishoredvr.github.io/Exploring/MessageMe.html" target="_blank" style="color: #22a1e6; font-weight: bold; font-size: 1.1em; text-decoration: none;">
		    Click here
		  </a>
	    </div>
                
                <div class="invoice-header">    
                    <div class="vendor-info" style="width: 40%; margin-left :4px;">
                        <div class="vendor-name" style="margin-top :4px;"> Jaya Surya Medical Agencies</div>
                        <div>Flat No.288, 5th Line, NGGO`S Colony, Guntur - 522004</div>
                        <div>GSTIN: 37ADTPL5097J2ZN </div>
			<div>DL No:20B; AP/07/01/2022-28815 | DL No:21B; AP/07/01/2022-28816 </div>
                        <div>Phone: 8125220635 | Email:veeranjaneyaprasad52@gmail.com</div>
                    </div>
                    <div class="customer-box" style="bottom-margin: 0;">
			    <div class="customer-box-header">CUSTOMER DETAILS</div>
			    <div class="customer-inputs">
			    <div class="suggestions-container">
		            <input type="text" id="customer-name" placeholder="Customer Name" oninput="showCustomerSuggestions(this); checkForModifications()">
		            <div class="suggestions-list" id="customer-suggestions"></div>
		   </div>	
		  
          	        <input type="text" id="customer-address" placeholder="Address (optional)" oninput="checkForModifications()">
	         	  </div>
		   </div>



		<!-- Customer Form Modal -->
		<div id="customerFormModal" class="modal" >
		    <div class="modal-content">
		        <div class="modal-header">Add New Customer</div>
		        <div class="modal-body">
		            <form id="customer-form">
		                <div class="form-group">
		                    <label>Customer Name*</label>
		                    <input type="text" id="customer-form-name" required>
		                </div>
		                <div class="form-group">
		                    <label>Address</label>
		                    <textarea id="customer-form-address"></textarea>
		                </div>
		                <div class="form-group">
		                    <label>GSTIN</label>
		                    <input type="text" id="customer-form-gstin">
		                </div>
		                <div class="form-group">
		                    <label>Drug Licenses</label>
		                    <div id="license-container">
		                        <div class="license-entry">
		                            <input type="text" placeholder="License Type" class="license-type">
		                            <input type="text" placeholder="License Number" class="license-number">
		                            <button type="button" class="btn btn-remove" onclick="removeLicense(this)">
		                                <i class="fas fa-times"></i>
		                            </button>
		                        </div>
		                    </div>
		                    <button type="button" class="btn btn-small" onclick="addLicense()">
		                        <i class="fas fa-plus"></i> Add License
		                    </button>
		                </div>
		                <div class="form-group">
		                    <label>Mobile Number</label>
		                    <input type="tel" id="customer-form-mobile">
		                </div>
		                <div class="form-group">
		                    <label>Email ID</label>
		                    <input type="email" id="customer-form-email">
		                </div>
		            </form>
		        </div>
		        <div class="modal-footer">
		            <button class="cancel-btn" onclick="closeCustomerForm()">Cancel</button>
		            <button onclick="saveCustomer()">Save Customer</button>
		        </div>
		    </div>
		</div>

                    <div class="invoice-info-box" style="width: 100%; align-items: center;">
                        <div><strong>BILLING INFORMATION</strong></div>
                        <div><strong>Bill No:</strong> <span id="invoice-bill-no">MED2023-001</span></div>
                        <div><strong>Date:</strong> <span id="invoice-date2">01/04/2023</span></div>
                        <div><strong>Time:</strong> <span id="invoice-time">10:45 AM</span></div>
                    </div>                   
                </div>

                <table class="medicine-table" style = "font-size: 8px;">
                    <thead>
                        <tr>
                            <th class="col-no">No</th>
                            <th class="col-name">Medicine Name</th>
                            <th class="col-mfr">MFR</th>
                            <th class="col-hsn">HSN</th>
                            <th class="col-batch">Batch</th>
                            <th class="col-expiry">Expiry</th>
                            <th class="col-qty">Qty</th>
                            <th class="col-rate">Rate</th>
                            <th class="col-disc">Disc.</th>
                            <th class="col-cgst">CGST%</th>
                            <th class="col-sgst">SGST%</th>
                            <th class="col-igst">IGST%</th>
                            <th class="col-amount">Amount</th>
                            <th class="col-action no-print"></th>
                        </tr>
                    </thead>
                    <tbody id="medicine-table-body">
                        <tr class="medicine-row">
                            <td class="col-no">1</td>
                            <td class="col-name">
				<div class="suggestions-container">
				        <input type="text" class="medicine-name" placeholder="Medicine name" oninput="showMedicineSuggestions(this); checkForModifications()" onkeydown="handleSuggestionNavigation(event, this)" onfocus="showMedicineSuggestions(this)">
			        <div class="suggestions-list"></div>
				</div>
			    </td>
                            <td class="col-mfr"><input type="text" class="mfr-code" placeholder="MFR" maxlength="4" readonly></td>
                            <td class="col-hsn"><input type="text" class="hsn-code" placeholder="HSN" maxlength="8" readonly></td>
                            <td class="col-batch"><input type="text" class="batch-no" placeholder="Batch" readonly></td>
                            <td class="col-expiry"><input type="text" class="expiry" placeholder="MM/YY" readonly></td>
                            <td class="col-qty"><input type="number" class="quantity" placeholder="Qty" min="1" oninput="calculateInvoiceTotals(); checkForModifications()"></td>
                            <td class="col-rate"><input type="text" class="rate" placeholder="Rate" oninput="calculateInvoiceTotals(); checkForModifications()"></td>
                            <td class="col-disc"><input type="text" class="discount" value="0" oninput="calculateInvoiceTotals(); checkForModifications()"></td>
                            <td class="col-cgst"><input type="number" class="cgst-rate" placeholder="%" min="0" max="100" step="0.01" value="0" oninput="calculateInvoiceTotals(); checkForModifications()"></td>
                            <td class="col-sgst"><input type="number" class="sgst-rate" placeholder="%" min="0" max="100" step="0.01" value="0" oninput="calculateInvoiceTotals(); checkForModifications()"></td>
                            <td class="col-igst"><input type="number" class="igst-rate" placeholder="%" min="0" max="100" step="0.01" value="0" oninput="calculateInvoiceTotals(); checkForModifications()"></td>
                            <td class="col-amount amount">0.00</td>
                            <td class="col-action no-print"><button class="btn btn-remove" onclick="removeRow(this)"><i class="fas fa-times"></i></button></td>
                        </tr>
                        <tr class="medicine-row">
                            <td class="col-no">2</td>
    <td class="col-name">
        <div class="suggestions-container">
            <input type="text" class="medicine-name" placeholder="Medicine name" oninput="showMedicineSuggestions(this); checkForModifications()" onkeydown="handleSuggestionNavigation(event, this)" onfocus="showMedicineSuggestions(this)">
            <div class="suggestions-list"></div>
        </div>
    </td>
    <td class="col-mfr"><input type="text" class="mfr-code" placeholder="MFR" maxlength="4" readonly></td>
    <td class="col-hsn"><input type="text" class="hsn-code" placeholder="HSN" maxlength="8" readonly></td>
    <td class="col-batch"><input type="text" class="batch-no" placeholder="Batch" readonly></td>
    <td class="col-expiry"><input type="text" class="expiry" placeholder="MM/YY" readonly></td>
    <td class="col-qty"><input type="number" class="quantity" placeholder="Qty" min="1" oninput="calculateInvoiceTotals(); checkForModifications()"></td>
    <td class="col-rate"><input type="text" class="rate" placeholder="Rate" oninput="calculateInvoiceTotals(); checkForModifications()"></td>
    <td class="col-disc"><input type="text" class="discount" value="0" oninput="calculateInvoiceTotals(); checkForModifications()"></td>
    <td class="col-cgst"><input type="number" class="cgst-rate" placeholder="%" min="0" max="100" step="0.01" value="0" oninput="calculateInvoiceTotals(); checkForModifications()"></td>
    <td class="col-sgst"><input type="number" class="sgst-rate" placeholder="%" min="0" max="100" step="0.01" value="0" oninput="calculateInvoiceTotals(); checkForModifications()"></td>
    <td class="col-igst"><input type="number" class="igst-rate" placeholder="%" min="0" max="100" step="0.01" value="0" oninput="calculateInvoiceTotals(); checkForModifications()"></td>
    <td class="col-amount amount">0.00</td>
    <td class="col-action no-print"><button class="btn btn-remove" onclick="removeRow(this)"><i class="fas fa-times"></i></button></td>
</tr>
                        </tr>
                    </tbody>
                </table>

                <div class="totals-section">
                    <div class="payment-info">
                        <div class="payment-mode" onchange="checkForModifications()">
                            <strong>Payment Mode:</strong> 
                            <select id="payment-mode">
                                <option>Cash</option>
                                <option>Card</option>
                                <option>UPI</option>
                                <option>Wallet</option>
                                <option>Credit</option>
                            </select>
                        </div>
                        <div class="bank-details">
                            <div class="bank-info">
                                <strong>Bank Details:</strong>
                                <div>Bank	: Union Bank Of India</div>
                                <div>A/C Name	:  Jaya Surya Medical Agencies</div>
                                <div>A/C No.	: 510101002749008 | IFSC	: UBIN0560987</div>
                                <div>UPI	: veeranjaneyaprasad52-4@oksbi</div>
                            </div>
                            <div class="qr-code">
                              <img src="QR.jpg" alt="QR Code for Payment">
                            </div>
                        </div>
                    </div>
                    <div class="totals">
                        <table>
                            <tr>
                                <td><strong>Subtotal:</strong></td>
                                <td id="subtotal">0.00</td>
                            </tr>
                            <tr>
                                <td><strong>Discount:</strong></td>
                                <td id="total-discount">0.00</td>
                            </tr>
                            <tr>
                                <td><strong>CGST:</strong></td>
                                <td id="cgst">0.00</td>
                            </tr>
                            <tr>
                                <td><strong>SGST:</strong></td>
                                <td id="sgst">0.00</td>
                            </tr>
                            <tr>
                                <td><strong>IGST:</strong></td>
                                <td id="igst">0.00</td>
                            </tr>
                            <tr>
                                <td><strong>Total:</strong></td>
                                <td id="total">₹0.00</td>
                            </tr>
                        </table>
                    </div>
                </div>

                <div class="invoice-footer" style="margin-bottom: 0 !important;">
                    <div class="declaration">
                        <strong>Declaration:</strong> 
                        <ul>
                            <li> All medicines sold as per doctor's prescription only and once sold will not be taken back or exchanged</li>
                            <li>Please check expiry date before using medicines and keep medicines out of reach of children</li>
                        </ul>
                    </div>
                    <div class="signature">
                        <div>For <strong> Jaya Surya Medical Agencies</strong></div>
                        <div class="signature-line"></div>
                        <div style = "margin-bottom: 0;">Authorized Signatory</div>
                    </div>
                </div>
            </div>
            
            <!-- The action-buttons div at the bottom is removed as its content is moved to the top -->
        </div>

        <div id="purchases-page" class="page-content" style="display: none;">
            <div class="container" style="margin: 0 auto;">
                
                <div class="purchase-form">
                    <div class="form-group">
                        <label>Vendor Name</label>
                        <input type="text" id="vendor-name" placeholder="Enter vendor name">
                    </div>
                    <div class="form-group">
                        <label>Vendor GSTIN</label>
                        <input type="text" id="vendor-gstin" placeholder="Enter GSTIN">
                    </div>
                    <div class="form-group">
                        <label>Vendor Address</label>
                        <input type="text" id="vendor-address" placeholder="Enter address">
                    </div>
                    <div class="form-group">
                        <label>Invoice Date</label>
                        <input type="date" id="purchase-date">
                    </div>
                    <div class="form-group">
                        <label>Invoice Number</label>
                        <input type="text" id="purchase-invoice" placeholder="Enter invoice number">
                    </div>
                    <div class="form-group">
                        <label>Payment Terms</label>
                        <select id="payment-terms">
                            <option>Immediate Payment</option>
                            <option>7 Days</option>
                            <option>15 Days</option>
                            <option>30 Days</option>
                        </select>
                    </div>
                </div>
                <div class="section-title">MEDICINE DETAILS</div>
                <div class="action-buttons">
                    <button class="btn btn-add" onclick="addPurchaseRow()">
                        <i class="fas fa-plus"></i> Add Medicine
                    </button>
                </div>
                <table class="medicine-table">
                    <thead>
                        <tr>
                            <th class="col-no">No</th>
                            <th class="col-name">Medicine Name</th>
                            <th class="col-mfr">MFR</th>
                            <th class="col-hsn">HSN</th>
                            <th class="col-batch">Batch</th>
                            <th class="col-expiry">Expiry</th>
                            <th class="col-qty">Qty</th>
                            <th class="col-rate">Rate</th>
                            <th class="col-disc">Disc.</th>
                            <th class="col-cgst">CGST%</th>
                            <th class="col-sgst">SGST%</th>
                            <th class="col-igst">IGST%</th>
                            <th class="col-amount">Amount</th>
                            <th class="col-action no-print"></th>
                        </tr>
                    </thead>
                    <tbody id="purchase-table-body">
                        <tr class="medicine-row">
                            <td class="col-no">1</td>
                            <td class="col-name"><input type="text" class="medicine-name" placeholder="Medicine name"></td>
                            <td class="col-mfr"><input type="text" class="mfr-code" placeholder="MFR"></td>
                            <td class="col-hsn"><input type="text" class="hsn-code" placeholder="HSN"></td>
                            <td class="col-batch"><input type="text" class="batch-no" placeholder="Batch"></td>
                            <td class="col-expiry"><input type="text" class="expiry" placeholder="MM/YY"></td>
                            <td class="col-qty"><input type="number" class="quantity" placeholder="Qty" min="1" oninput="calculatePurchaseTotals()"></td>
                            <td class="col-rate"><input type="text" class="rate" placeholder="Rate" oninput="calculatePurchaseTotals()"></td>
                            <td class="col-disc"><input type="text" class="discount" value="0" oninput="calculatePurchaseTotals()"></td>
                            <td class="col-cgst"><input type="number" class="cgst-rate" placeholder="%" min="0" max="100" step="0.01" value="0" oninput="calculatePurchaseTotals()"></td>
                            <td class="col-sgst"><input type="number" class="sgst-rate" placeholder="%" min="0" max="100" step="0.01" value="0" oninput="calculatePurchaseTotals()"></td>
                            <td class="col-igst"><input type="number" class="igst-rate" value="0" oninput="calculatePurchaseTotals()"></td>
                            <td class="col-amount amount">0.00</td>
                            <td class="col-action no-print"><button class="btn btn-remove" onclick="removePurchaseRow(this)"><i class="fas fa-times"></i></button></td>
                        </tr>
                    </tbody>
                </table>
                <div class="totals-section">
                    <div class="payment-info" style="width: 60%;">
                        </div>
                    <div class="totals" style="width: 35%;">
                        <table>
                            <tr>
                                <td><strong>Subtotal:</strong></td>
                                <td id="purchase-subtotal">0.00</td>
                            </tr>
                            <tr>
                                <td><strong>Discount:</strong></td>
                                <td id="purchase-total-discount">0.00</td>
                            </tr>
                            <tr>
                                <td><strong>CGST:</strong></td>
                                <td id="purchase-cgst">0.00</td>
                            </tr>
                            <tr>
                                <td><strong>SGST:</strong></td>
                                <td id="purchase-sgst">0.00</td>
                            </tr>
                            <tr>
                                <td><strong>IGST:</strong></td>
                                <td id="purchase-igst">0.00</td>
                            </tr>
                            <tr>
                                <td><strong>Total:</strong></td>
                                <td id="purchase-total">₹0.00</td>
                            </tr>
                        </table>
                    </div>
                </div>

                <div class="action-buttons" style="margin-top: 15px; gap: 20px;" >
                    <button class="btn" style="background: #9b59b6;">
                        <i class="fas fa-file-invoice"></i> View Invoice
                    </button>
                    <button class="btn" onclick="savePurchase()" style="background: #2a7fbf;">
                        <i class="fas fa-save"></i> Save Purchase
                    </button>
                    <button class="btn" style="background: #e67e22;">
                        <i class="fas fa-print"></i> Print
                    </button>
                    <button class="btn" onclick="printAndSavePurchase()" style="background: #22a1e6;">
                        <i class="fas fa-print"></i> Print & Save
                    </button>
                </div>
            </div>
        </div>

        <div id="report-page" class="page-content" style="display: none;">
            <div class="container" style="margin: 0 auto;">
                <div class="report-header">
                    <div class="report-title" id="current-report-title">Reports</div>
                </div>
                <div class="report-type-selector">
                    <label>
                        <input type="radio" name="report-type" value="sales" checked onchange="showReportType()"> Sales
                    </label>
                    <label>
                        <input type="radio" name="report-type" value="purchases" onchange="showReportType()"> Purchases
                    </label>
                    <label>
                        <input type="radio" name="report-type" value="stock" onchange="showReportType()"> Stock Report
                    </label>
                </div>
                <div class="report-controls">
                    <div class="date-filter" id="date-range-filter">
                        <label>From Date:</label>
                        <input type="date" id="report-from">
                        <label>To Date:</label>
                        <input type="date" id="report-to">
                    </div>
                    <div class="date-filter stock" id="stock-date-filter">
                        <label>As of Date:</label>
                        <input type="date" id="report-stock-date">
                    </div>
                    <div class="report-actions">
                        <button class="btn btn-print" onclick="printReport()">
                            <i class="fas fa-print"></i> Print Report
                        </button>
                        <button class="btn btn-csv" onclick="exportToCSV()">
                            <i class="fas fa-file-csv"></i> Export to CSV
                        </button>
                    </div>
                </div>
                <div class="report-total" id="report-total-value"> Total Value: ₹0.00 </div>
                <table class="medicine-table">
                    <thead>
                        <tr id="report-head">
                        </tr>
                    </thead>
                    <tbody id="report-body">
                    </tbody>
                </table>
            </div>
        </div>



	<div id="tracker-page" class="page-content" style="display: none;">
	    <div class="container">
	        <h2 class="page-title">Sales and Purchase Tracker</h2>
	         <div class="tracker-filters" style="display: flex; flex-wrap: wrap; gap: 10px; align-items: center;">


		   <select id="tracker-type" style="flex: 1 1 15%;">
	                <option value="">All (Sales/Purchases)</option>
	                <option value="sales">Sales</option>
	                <option value="purchases">Purchases</option>
	            </select>


	            <input type="text" id="tracker-medicine-name" style="width: 20%;" placeholder="Medicine Name" style="flex: 1 1 20%;">
	            <input type="text" id="tracker-customer-vendor" style="width: 20%;" placeholder="Customer/Vendor Name" style="flex: 1 1 25%;">
	            <input type="text" id="tracker-batch" style="width: 20%;" placeholder="Batch Number" style="flex: 1 1 10%;">

		    

	            <input type="text" id="filter-expiry-month-year" name="filter-expiry-month-year" placeholder="MM/YY"
	                   pattern="(0[1-9]|1[0-2])\/[0-9]{2}" title="Enter a date in MM/YY format (e.g., 07/25)" style="flex: 1 1 10%;">
	            <input type="date" style="width: 20%;" id="tracker-from-date" style="flex: 1 1 20%;">
	            <input type="date" style="width: 20%;" id="tracker-to-date" style="flex: 1 1 20%;">
	           

	            <!-- Buttons Wrapper -->
	            <div style="flex: 1 1 40%;  display: flex; gap: 8px;">
	                <button class="btn" onclick="applyFilters()">Apply</button>
	                <button class="btn" onclick="printReport()">Print</button>
	            </div>

        </div>
	        <div class="tracker-table-container">
	            <table class="tracker-table">
	                <thead>
	                    <tr>
	                        <th>Date</th>
	                        <th>Bill No.</th>
	                        <th>Type</th>
	                        <th>Customer/Vendor</th>
	                        <th>Medicine</th>
	                        <th>Batch</th>
	                        <th>Qty</th>
	                        <th>Rate</th>
	                        <th>Amount</th>
	                    </tr>
	                </thead>
	                <tbody id="tracker-table-body">
	                    </tbody>
	            </table>
	        </div>
	    </div>
	</div>




        <div id="data-management-page" class="page-content" style="display: none;">
            <div class="container" style="margin: 0 auto;">
                <h2 style="margin-bottom: 20px; color: var(--primary);font-weight: 600;"> 
                    <i class="fas fa-database"></i> Data Management 
                </h2>
                <div class="data-management-form">
                    <div class="data-management-section">
                        <h3><i class="fas fa-trash-alt"></i> Delete Transactions</h3>
                        <div class="form-row">
                            <label>Delete by Invoice Number</label>
                            <div style="display: flex; gap: 8px;">
                                <select id="delete-transaction-type" style="flex: 1;">
                                    <option value="sale">Sale Invoice</option>
                                    <option value="purchase">Purchase Invoice</option>
                                </select>
                                <input type="text" id="delete-invoice-number" placeholder="Enter invoice number" style="flex: 2;">
                            </div>
                        </div>
                        <div class="form-row">
                            <button class="btn btn-danger" onclick="confirmDeleteByInvoice()" style="width: 100%;">
                                <i class="fas fa-trash"></i> Delete Invoice
                            </button>
                        </div>
                        <div class="form-row">
                            <label>Delete Transactions Between Dates</label>
                            <div style="display: flex; gap: 8px;">
                                <select id="delete-date-type" style="flex: 1;">
                                    <option value="sale">Sales</option>
                                    <option value="purchase">Purchases</option>
                                    <option value="both">Both</option>
                                ></select>
                                <input type="date" id="delete-from-date" style="flex: 1;">
                                <input type="date" id="delete-to-date" style="flex: 1;">
                            </div>
                        </div>
                        <div class="form-row">
                            <button class="btn btn-danger" onclick="confirmDeleteByDateRange()" style="width: 100%;">
                                <i class="fas fa-trash"></i> Delete Transactions
                            </button>
                        </div>
                    </div>
                    <div class="data-management-section danger-zone">
                        <h3><i class="fas fa-exclamation-triangle"></i> Danger Zone</h3>
                        <div class="form-row">
                            <label>Delete All Transaction Data</label>
                            <p style="font-size: 12px; color: #666; margin-bottom: 10px;">
                                This will permanently delete ALL sales and purchase transactions. This action cannot be undone.
                            </p>
                            <input type="password" id="admin-password" placeholder="Enter admin password">
                        </div>
                        <div class="form-row">
                            <button class="btn btn-danger" onclick="confirmDeleteAll()" style="width: 100%;">
                                <i class="fas fa-skull-crossbones"></i> Delete All Data
                            </button>
                        </div>
                    </div>
                </div>

                <div class="data-management-section" style="margin-top: 20px;">
                    <h3><i class="fas fa-file-export"></i> Backup & Restore</h3>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
                        <div>
                            <div class="form-row">
                                <label>Create Backup</label>
                                <p style="font-size: 12px; color: #666; margin-bottom: 10px;">
                                    Download a backup of all your data.
                                </p>
                                <button class="btn" onclick="createBackupFile()" style="width: 100%;">
                                    <i class="fas fa-file-download"></i> Download Backup
                                </button>
                            </div>
                        </div>
                        <div>
                            <div class="form-row">
                                <label>Restore from Backup (Upload a previously saved backup file.)</label>
                                <input type="file" id="backup-file" accept=".csv" style="margin-bottom: 8px; width: 50%;">
                                <button class="btn" onclick="restoreBackupFile()" style="width: 30%;">
                                    <i class="fas fa-file-upload"></i> Restore Backup
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="messageModal" class="modal">
        <div class="modal-content">
            <div class="modal-header" id="modalHeader"></div>
            <div class="modal-body" id="modalBody"></div>
            <div class="modal-footer" id="modalFooter">
                <button onclick="closeModal()">OK</button>
            </div>
        </div>
    </div>

    <!-- Batch Selection Modal -->
    <div id="batchSelectionModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">Select Medicine Batch</div>
            <div class="modal-body">
                <p>Multiple batches found for <strong id="selectedMedicineName"></strong>. Please select one:</p>
                <table id="batchSelectionTable">
                    <thead>
                        <tr>
                            <th>Batch No</th>
                            <th>Expiry</th>
                            <th>Rate</th>
                            <th>Available Qty</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Batch options will be populated here -->
                    </tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button class="cancel-btn" onclick="closeBatchSelectionModal()">Cancel</button>
            </div>
        </div>
    </div>

    <script>
        // Define the localStorage key for your data
        const DATA_STORAGE_KEY = 'billingData';
        // Placeholder for QR code as local file paths are not accessible
        const QR_PLACEHOLDER_PATH = "QR.jpg";
        
        // Initial CSV header for the data file - UPDATED TO INCLUDE CGST, SGST, IGST for medicines
        const CSV_HEADER = "Type,BillNo,Date,Time,CustomerName,CustomerAddress,PaymentMode,Medicines,Subtotal,TotalDiscount,CGST,SGST,IGST,Total,VendorName,VendorGSTIN,VendorAddress,PurchaseInvoice,PaymentTerms\n";

        // Function to load data from localStorage	
        async function loadDataFromStorage() {
            let csvData = localStorage.getItem(DATA_STORAGE_KEY);
            if (!csvData) {
                // If no data exists, initialize with header
                csvData = CSV_HEADER;
                localStorage.setItem(DATA_STORAGE_KEY, csvData);
            }
            return csvData;
        } // Function: loadDataFromStorage - Complete

        // Function to save data to localStorage
        async function saveDataToStorage(csvString) {
            localStorage.setItem(DATA_STORAGE_KEY, csvString);
        } // Function: saveDataToStorage - Complete

        // Function to show custom modal messages
        function showMessage(header, body, type = 'alert', callback = null) {
            document.getElementById('modalHeader').textContent = header;
            document.getElementById('modalBody').textContent = body;
            const modalFooter = document.getElementById('modalFooter');
            modalFooter.innerHTML = ''; // Clear previous buttons

            if (type === 'confirm') {
                const confirmBtn = document.createElement('button');
                confirmBtn.textContent = 'Confirm';
                confirmBtn.onclick = () => {
                    closeModal();
                    if (callback) callback(true);
                };
                modalFooter.appendChild(confirmBtn);

                const cancelBtn = document.createElement('button');
                cancelBtn.textContent = 'Cancel';
                cancelBtn.className = 'cancel-btn';
                cancelBtn.onclick = () => {
                    closeModal();
                    if (callback) callback(false);
                };
                modalFooter.appendChild(cancelBtn);
            } else { // 'alert' type
                const okBtn = document.createElement('button');
                okBtn.textContent = 'OK';
                okBtn.onclick = () => {
                    closeModal();
                    if (callback) callback();
                };
                modalFooter.appendChild(okBtn);
            }
            document.getElementById('messageModal').style.display = 'flex';
        } // Function: showMessage - Complete

        function closeModal() {
            document.getElementById('messageModal').style.display = 'none';
        } // Function: closeModal - Complete

        // Function to show batch selection modal
        function showBatchSelectionModal(medicineName, batches, targetRow) {
            document.getElementById('selectedMedicineName').textContent = medicineName;
            const batchTableBody = document.querySelector('#batchSelectionTable tbody');
            batchTableBody.innerHTML = ''; // Clear previous batches

            batches.forEach(batch => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${batch.batch}</td>
                    <td>${batch.expiry}</td>
                    <td>${batch.rate.toFixed(2)}</td>
                    <td>${batch.currentStock}</td>
                    <td><button class="btn select-batch-btn" data-batch='${JSON.stringify(batch)}'>Select</button></td>
                `;
                batchTableBody.appendChild(row);
            });

            // Add event listener to select buttons
            batchTableBody.querySelectorAll('.select-batch-btn').forEach(button => {
                button.onclick = () => {
                    const selectedBatch = JSON.parse(button.dataset.batch);
                    applySelectedBatchToRow(selectedBatch, targetRow);
                    closeBatchSelectionModal();
                };
            });

            document.getElementById('batchSelectionModal').style.display = 'flex';
        } // Function: showBatchSelectionModal - Complete

        function closeBatchSelectionModal() {
            document.getElementById('batchSelectionModal').style.display = 'none';
        } // Function: closeBatchSelectionModal - Complete

        // Apply selected batch details to the invoice row
        function applySelectedBatchToRow(batch, row) {
            row.querySelector('.mfr-code').value = batch.mfr;
            row.querySelector('.hsn-code').value = batch.hsn;
            row.querySelector('.batch-no').value = batch.batch;
            row.querySelector('.expiry').value = batch.expiry;
            row.querySelector('.rate').value = batch.rate.toFixed(2);
            row.querySelector('.quantity').setAttribute('max', batch.currentStock); // Set max quantity
            row.querySelector('.quantity').value = Math.min(1, batch.currentStock); // Set default quantity to 1 or available stock
            row.querySelector('.cgst-rate').value = batch.cgst;
            row.querySelector('.sgst-rate').value = batch.sgst;
            row.querySelector('.igst-rate').value = batch.igst;
            calculateInvoiceTotals();
        } // Function: applySelectedBatchToRow - Complete

        function showPage(pageId) {
            document.querySelectorAll('.page-content').forEach(page => {
                page.style.display = 'none';
            });
            const targetPage = document.getElementById(pageId); // Removed '-page' suffix here
            if (targetPage) {
                targetPage.style.display = 'block';
            } else {
                console.error(`Error: Page element with ID ${pageId} not found.`);
            }

            document.querySelectorAll('.nav-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            const navButton = document.querySelector(`.nav-btn[onclick*="showPage('${pageId}')"]`);
            if (navButton) {
                navButton.classList.add('active');
            } else {
                console.warn(`Warning: Navigation button for page ${pageId} not found.`);
            }

            // Update clear all button state
            const clearAllBtn = document.getElementById('clear-all-btn');
		if (clearAllBtn) {
		    if (pageId === 'invoice-page' || pageId === 'purchases-page' || pageId === 'tracker-page') {
		        clearAllBtn.classList.remove('disabled');
		    } else {
		        clearAllBtn.classList.add('disabled');
		    }
		}


            let title = '';
            if (pageId === 'invoice-page') title = 'Tax Invoice';
            else if (pageId === 'purchases-page') title = 'Purchase Entry';
            else if (pageId === 'report-page') title = 'Reports';
	        else if (pageId === 'tracker-page') title = 'Tracker';
            else if (pageId === 'data-management-page') title = 'Data Management';
            const reportTitleElement = document.getElementById('current-report-title');
            if (reportTitleElement) {
                reportTitleElement.textContent = title;
            } else {
                console.warn(`Warning: Element with ID 'current-report-title' not found.`);
            }

            // Recalculate totals or load reports when switching to pages that need it
            if (pageId === 'purchases-page') {
                calculatePurchaseTotals();
            } else if (pageId === 'invoice-page') {
                calculateInvoiceTotals();
            } else if (pageId === 'report-page') {
                const selectedType = document.querySelector('input[name="report-type"]:checked')?.value || 'sales'; // Default to sales if not found
                if (selectedType === 'stock') {
                    loadStockReport(document.getElementById('report-stock-date').value);
                } else if (selectedType === 'sales') {
                    loadSalesReport(document.getElementById('report-from').value, document.getElementById('report-to').value);
                } else if (selectedType === 'purchases') {
                    loadPurchasesReport(document.getElementById('report-from').value, document.getElementById('report-to').value);
                }
            }
        } // Function: showPage - Complete

        let rowCount = 2; // For invoice page, starting with 2 initial rows

        function addNewRow() {
            rowCount++;
            const tableBody = document.getElementById('medicine-table-body');
            const newRow = document.createElement('tr');
            newRow.className = 'medicine-row';
            newRow.innerHTML = `
                <td class="col-no">${rowCount}</td>
                <td class="col-name">
                    <div class="suggestions-container">
                        <input type="text" class="medicine-name" placeholder="Medicine name" oninput="showMedicineSuggestions(this); checkForModifications()" onkeydown="handleSuggestionNavigation(event, this)" onfocus="showMedicineSuggestions(this)">
                        <div class="suggestions-list"></div>
                    </div>
                </td>
                <td class="col-mfr"><input type="text" class="mfr-code" placeholder="MFR" maxlength="4" readonly></td>
                <td class="col-hsn"><input type="text" class="hsn-code" placeholder="HSN" maxlength="8" readonly></td>
                <td class="col-batch"><input type="text" class="batch-no" placeholder="Batch" readonly></td>
                <td class="col-expiry"><input type="text" class="expiry" placeholder="MM/YY" readonly></td>
                <td class="col-qty"><input type="number" class="quantity" placeholder="Qty" min="1" oninput="calculateInvoiceTotals(); checkForModifications()"></td>
                <td class="col-rate"><input type="text" class="rate" placeholder="Rate" oninput="calculateInvoiceTotals(); checkForModifications()"></td>
                <td class="col-disc"><input type="text" class="discount" value="0" oninput="calculateInvoiceTotals(); checkForModifications()"></td>
                <td class="col-cgst"><input type="number" class="cgst-rate" placeholder="%" min="0" max="100" step="0.01" value="0" oninput="calculateInvoiceTotals(); checkForModifications()"></td>
                <td class="col-sgst"><input type="number" class="sgst-rate" placeholder="%" min="0" max="100" step="0.01" value="0" oninput="calculateInvoiceTotals(); checkForModifications()"></td>
                <td class="col-igst"><input type="number" class="igst-rate" placeholder="%" min="0" max="100" step="0.01" value="0" oninput="calculateInvoiceTotals(); checkForModifications()"></td>
                <td class="col-amount amount">0.00</td>
                <td class="col-action no-print"><button class="btn btn-remove" onclick="removeRow(this)"><i class="fas fa-times"></i></button></td>
            `;
            tableBody.appendChild(newRow);
            updateRowNumbers('medicine-table-body');
            calculateInvoiceTotals();
            
            // Initialize autofill for the new row
            initializeAutofillForRow(newRow);
        } // Function: addNewRow - Complete

        function removeRow(button) {
            const row = button.closest('.medicine-row');
            row.remove();
            updateRowNumbers('medicine-table-body');
            rowCount--;
            calculateInvoiceTotals(); // Recalculate totals after removing a row
        } // Function: removeRow - Complete

        function updateRowNumbers(tableBodyId) {
            const tableBody = document.getElementById(tableBodyId);
            const rows = tableBody.getElementsByClassName('medicine-row');
            for (let i = 0; i < rows.length; i++) {
                rows[i].querySelector('.col-no').textContent = i + 1;
            }
        } // Function: updateRowNumbers - Complete

        // Invoice related functions
        function calculateInvoiceTotals() {
            const tableBody = document.getElementById('medicine-table-body');
            const rows = tableBody.getElementsByClassName('medicine-row');
            let subtotal = 0;
            let totalDiscount = 0;
            let totalCGST = 0;
            let totalSGST = 0;
            let totalIGST = 0;

            for (let i = 0; i < rows.length; i++) {
                const row = rows[i];
                const qty = parseFloat(row.querySelector('.quantity').value) || 0;
                const rate = parseFloat(row.querySelector('.rate').value) || 0;
                const discount = parseFloat(row.querySelector('.discount').value) || 0;
                const cgstRate = parseFloat(row.querySelector('.cgst-rate').value) || 0;
                const sgstRate = parseFloat(row.querySelector('.sgst-rate').value) || 0;
                const igstRate = parseFloat(row.querySelector('.igst-rate').value) || 0;

                const itemTotal = qty * rate;
                const discountAmount = itemTotal * (discount / 100);
                const taxableValue = itemTotal - discountAmount;

                const cgstAmount = taxableValue * (cgstRate / 100);
                const sgstAmount = taxableValue * (sgstRate / 100);
                const igstAmount = taxableValue * (igstRate / 100);
                
                const itemAmount = taxableValue + cgstAmount + sgstAmount + igstAmount;

                row.querySelector('.amount').textContent = itemAmount.toFixed(2);

                subtotal += itemTotal;
                totalDiscount += discountAmount;
                totalCGST += cgstAmount;
                totalSGST += sgstAmount;
                totalIGST += igstAmount;
            }

            document.getElementById('subtotal').textContent = subtotal.toFixed(2);
            document.getElementById('total-discount').textContent = totalDiscount.toFixed(2);
            document.getElementById('cgst').textContent = totalCGST.toFixed(2);
            document.getElementById('sgst').textContent = totalSGST.toFixed(2);
            document.getElementById('igst').textContent = totalIGST.toFixed(2);
            
            const total = subtotal - totalDiscount + totalCGST + totalSGST + totalIGST;
            document.getElementById('total').textContent = '₹' + total.toFixed(2);
        } // Function: calculateInvoiceTotals - Complete

        function getInvoiceData() {
            const customerName = document.getElementById('customer-name').value;
	        const customerAddress = document.getElementById('customer-address').value;
	        const billNo = document.getElementById('invoice-bill-no').textContent; // Get current bill number
            // Store date in McFarland-MM-DD format for consistency
            const date = formatDateForStorage(document.getElementById('invoice-date2').textContent); 
            const time = document.getElementById('invoice-time').textContent;
            const paymentMode = document.getElementById('payment-mode').value;

            const medicineRows = document.querySelectorAll('#medicine-table-body .medicine-row');
            const medicines = [];
            medicineRows.forEach(row => {
                const medicine = {
                    name: row.querySelector('.medicine-name').value,
                    mfr: row.querySelector('.mfr-code').value,
                    hsn: row.querySelector('.hsn-code').value,
                    batch: row.querySelector('.batch-no').value,
                    expiry: row.querySelector('.expiry').value,
                    quantity: parseFloat(row.querySelector('.quantity').value) || 0,
                    rate: parseFloat(row.querySelector('.rate').value) || 0,
                    discount: parseFloat(row.querySelector('.discount').value) || 0,
                    cgst: parseFloat(row.querySelector('.cgst-rate').value) || 0,
                    sgst: parseFloat(row.querySelector('.sgst-rate').value) || 0,
                    igst: parseFloat(row.querySelector('.igst-rate').value) || 0,
                    amount: parseFloat(row.querySelector('.amount').textContent) || 0
                };
                medicines.push(medicine);
            });

            const subtotal = parseFloat(document.getElementById('subtotal').textContent) || 0;
            const totalDiscount = parseFloat(document.getElementById('total-discount').textContent) || 0;
            const cgst = parseFloat(document.getElementById('cgst').textContent) || 0;
            const sgst = parseFloat(document.getElementById('sgst').textContent) || 0;
            const igst = parseFloat(document.getElementById('igst').textContent) || 0;
            const total = parseFloat(document.getElementById('total').textContent.replace('₹', '')) || 0;

            return {
                type: 'sale',
                billNo,
                date,
                time,
                customerName,
                customerAddress,
                paymentMode,
                medicines, // This will be stringified for CSV
                subtotal,
                totalDiscount,
                cgst,
                sgst,
                igst,
                total,
                vendorName: '', // Not applicable for sales
                vendorGSTIN: '', // Not applicable for sales
                vendorAddress: '', // Not applicable for sales
                purchaseInvoice: '', // Not applicable for sales
                paymentTerms: '' // Not applicable for sales
            };
        } // Function: getInvoiceData - Complete

        function formatAsCSV(data) {
            // Convert medicines array to a string for CSV
            const medicinesStr = data.medicines.map(m => 
                `${m.name}|${m.mfr}|${m.hsn}|${m.batch}|${m.expiry}|${m.quantity}|${m.rate}|${m.discount}|${m.cgst}|${m.sgst}|${m.igst}|${m.amount}`
            ).join(';');
            
            // Ensure all fields are present, even if empty, to maintain column integrity
            return [
                data.type,
                data.billNo || '',
                data.date || '',
                data.time || '',
                `"${data.customerName || ''}"`,
                `"${data.customerAddress || ''}"`,
                data.paymentMode || '',
                `"${medicinesStr}"`,
                data.subtotal || 0,
                data.totalDiscount || 0,
                data.cgst || 0,
                data.sgst || 0,
                data.igst || 0,
                data.total || 0,
                `"${data.vendorName || ''}"`,
                `"${data.vendorGSTIN || ''}"`,
                `"${data.vendorAddress || ''}"`,
                data.purchaseInvoice || '',
                data.paymentTerms || ''
            ].map(value => {
                // Escape double quotes within string values
                if (typeof value === 'string' && value.includes('"')) {
                    return `"${value.replace(/"/g, '""')}"`;
                }
                return value;
            }).join(',');
        } // Function: formatAsCSV - Complete

        async function saveSales() {
            const invoiceData = getInvoiceData();
            const billNo = invoiceData.billNo;
            
            // Check if this is a loaded invoice (originalInvoiceData exists)
            if (originalInvoiceData) {
                // Check if any changes were made
                if (!hasInvoiceBeenModified(originalInvoiceData)) {
                    showMessage('No Changes', 
                        'No changes detected. Please modify the invoice before saving.', 
                        'alert');
                    return;
                }
                
                // If changes were made, confirm before saving as new invoice
                showMessage('Confirm Save', 
                    'You are modifying an existing invoice. This will create a new invoice with a new number and current date/time. Continue?', 
                    'confirm', async (confirmed) => {
                        if (confirmed) {
                            try {
                                let csvData = await loadDataFromStorage();
                                const newBillNo = await generateNewInvoiceNumber();
                                
                                // Update invoice display fields
                                document.getElementById('invoice-bill-no').textContent = newBillNo;
                                updateInvoiceDateTime(); // Updates display date/time
                                
                                // Update invoiceData object for saving
                                invoiceData.billNo = newBillNo;
                                invoiceData.date = formatDateForStorage(document.getElementById('invoice-date2').textContent); // Get formatted date for storage
                                invoiceData.time = document.getElementById('invoice-time').textContent;
                                
                                // Remove modification note from customer name
                                invoiceData.customerName = invoiceData.customerName
                                    .replace(/ \(Modified from .*\)$/, '')
                                    .replace(/ \(Loaded from .*\)$/, '');
                                
                                // Format medicines data properly for CSV
                                const medicinesStr = invoiceData.medicines.map(m => 
                                    `${m.name}|${m.mfr}|${m.hsn}|${m.batch}|${m.expiry}|${m.quantity}|${m.rate}|${m.discount}|${m.cgst}|${m.sgst}|${m.igst}|${m.amount}`
                                ).join(';');
                                
                                // Escape quotes in string fields
                                const escapeQuotes = (str) => `"${str.replace(/"/g, '""')}"`;
                                
                                const newRow = [
                                    'sale',
                                    invoiceData.billNo,
                                    invoiceData.date,
                                    invoiceData.time,
                                    escapeQuotes(invoiceData.customerName),
                                    escapeQuotes(invoiceData.customerAddress),
                                    invoiceData.paymentMode,
                                    escapeQuotes(medicinesStr),
                                    invoiceData.subtotal,
                                    invoiceData.totalDiscount,
                                    invoiceData.cgst,
                                    invoiceData.sgst,
                                    invoiceData.igst,
                                    invoiceData.total,
                                    '', '', '', '', '' // Vendor fields (empty for sales)
                                ].join(',');
                                
                                csvData += newRow + "\n";
                                await saveDataToStorage(csvData);
                                
                                showMessage('Success', 
                                    `Modified invoice saved with new number: ${newBillNo}. Original was ${originalInvoiceData.billNo}`);
                                originalInvoiceData = null; // Clear original data after saving as new
                            } catch (error) {
                                showMessage('Error', 'Failed to save invoice: ' + error.message);
                            }
                        }
                    });
                return;
            }
            
            // For new invoices, check for duplicates
            if (await invoiceNumberExists(billNo)) {
                showMessage('Duplicate Invoice', 
                    `Invoice number ${billNo} already exists. Please modify the invoice number or details.`, 
                    'alert');
                return;
            }
            
            // Validate required fields
            if (!invoiceData.customerName || invoiceData.medicines.length === 0 || 
                invoiceData.medicines.some(m => !m.name || !m.quantity || !m.rate)) {
                showMessage('Validation Error', 
                    'Customer Name and all medicine entries (name, quantity, rate) are required.', 
                    'alert');
                return;
            }

            try {
                let csvData = await loadDataFromStorage();
                
                // Format medicines data properly for CSV
                const medicinesStr = invoiceData.medicines.map(m => 
                    `${m.name}|${m.mfr}|${m.hsn}|${m.batch}|${m.expiry}|${m.quantity}|${m.rate}|${m.discount}|${m.cgst}|${m.sgst}|${m.igst}|${m.amount}`
                ).join(';');
                
                // Escape quotes in string fields
                const escapeQuotes = (str) => `"${str.replace(/"/g, '""')}"`;
                
                const newRow = [
                    'sale',
                    invoiceData.billNo,
                    invoiceData.date, // Already formatted in getInvoiceData
                    invoiceData.time,
                    escapeQuotes(invoiceData.customerName),
                    escapeQuotes(invoiceData.customerAddress),
                    invoiceData.paymentMode,
                    escapeQuotes(medicinesStr),
                    invoiceData.subtotal,
                    invoiceData.totalDiscount,
                    invoiceData.cgst,
                    invoiceData.sgst,
                    invoiceData.igst,
                    invoiceData.total,
                    '', '', '', '', '' // Vendor fields (empty for sales)
                ].join(',');
                
                csvData += newRow + "\n";
                await saveDataToStorage(csvData);
                
                showMessage('Success', 'New invoice saved successfully!');
            } catch (error) {
                showMessage('Error', 'Failed to save invoice: ' + error.message);
            }
        } // Function: saveSales - Complete

        async function printAndSaveSales() {
            const invoiceData = getInvoiceData();
            const billNo = invoiceData.billNo;
            
            // Check if this is a loaded invoice (originalInvoiceData exists)
            if (originalInvoiceData) {
                // Check if any changes were made
                if (!hasInvoiceBeenModified(originalInvoiceData)) {
                    showMessage('No Changes', 
                        'No changes detected. Please modify the invoice before saving and printing.', 
                        'alert');
                    return;
                }
                
                // If changes were made, confirm before saving as new invoice
                showMessage('Confirm Save & Print', 
                    'You are modifying an existing invoice. This will create a new invoice with a new number and current date/time. Continue?', 
                    'confirm', async (confirmed) => {
                        if (confirmed) {
                            try {
                                let csvData = await loadDataFromStorage();
                                const newBillNo = await generateNewInvoiceNumber();
                                
                                // Update invoice display fields
                                document.getElementById('invoice-bill-no').textContent = newBillNo;
                                updateInvoiceDateTime(); // Updates display date/time
                                
                                // Update invoiceData object for saving
                                invoiceData.billNo = newBillNo;
                                invoiceData.date = formatDateForStorage(document.getElementById('invoice-date2').textContent); // Get formatted date for storage
                                invoiceData.time = document.getElementById('invoice-time').textContent;
                                
                                // Remove modification note from customer name
                                invoiceData.customerName = invoiceData.customerName
                                    .replace(/ \(Modified from .*\)$/, '')
                                    .replace(/ \(Loaded from .*\)$/, '');
                                
                                // Format medicines data properly for CSV
                                const medicinesStr = invoiceData.medicines.map(m => 
                                    `${m.name}|${m.mfr}|${m.hsn}|${m.batch}|${m.expiry}|${m.quantity}|${m.rate}|${m.discount}|${m.cgst}|${m.sgst}|${m.igst}|${m.amount}`
                                ).join(';');
                                
                                // Escape quotes in string fields
                                const escapeQuotes = (str) => `"${str.replace(/"/g, '""')}"`;
                                
                                const newRow = [
                                    'sale',
                                    invoiceData.billNo,
                                    invoiceData.date,
                                    invoiceData.time,
                                    escapeQuotes(invoiceData.customerName),
                                    escapeQuotes(invoiceData.customerAddress),
                                    invoiceData.paymentMode,
                                    escapeQuotes(medicinesStr),
                                    invoiceData.subtotal,
                                    invoiceData.totalDiscount,
                                    invoiceData.cgst,
                                    invoiceData.sgst,
                                    invoiceData.igst,
                                    invoiceData.total,
                                    '', '', '', '', '' // Vendor fields (empty for sales)
                                ].join(',');
                                
                                csvData += newRow + "\n";
                                await saveDataToStorage(csvData);
                                
                                // Print after successful save
                                window.print();
                                
                                showMessage('Success', 
                                    `Modified invoice saved and printed with new number: ${newBillNo}. Original was ${originalInvoiceData.billNo}`);
                                originalInvoiceData = null; // Clear original data after saving as new
                            } catch (error) {
                                showMessage('Error', 'Failed to save and print invoice: ' + error.message);
                            }
                        }
                    });
                return;
            }
            
            // For new invoices, check for duplicates
            if (await invoiceNumberExists(billNo)) {
                showMessage('Duplicate Invoice', 
                    `Invoice number ${billNo} already exists. Please modify the invoice number or details.`, 
                    'alert');
                return;
            }
            
            // Validate required fields
            if (!invoiceData.customerName || invoiceData.medicines.length === 0 || 
                invoiceData.medicines.some(m => !m.name || !m.quantity || !m.rate)) {
                showMessage('Validation Error', 
                    'Customer Name and all medicine entries (name, quantity, rate) are required.', 
                    'alert');
                return;
            }

            try {
                let csvData = await loadDataFromStorage();
                
                // Format medicines data properly for CSV
                const medicinesStr = invoiceData.medicines.map(m => 
                    `${m.name}|${m.mfr}|${m.hsn}|${m.batch}|${m.expiry}|${m.quantity}|${m.rate}|${m.discount}|${m.cgst}|${m.sgst}|${m.igst}|${m.amount}`
                ).join(';');
                
                // Escape quotes in string fields
                const escapeQuotes = (str) => `"${str.replace(/"/g, '""')}"`;
                
                const newRow = [
                    'sale',
                    invoiceData.billNo,
                    invoiceData.date, // Already formatted in getInvoiceData
                    invoiceData.time,
                    escapeQuotes(invoiceData.customerName),
                    escapeQuotes(invoiceData.customerAddress),
                    invoiceData.paymentMode,
                    escapeQuotes(medicinesStr),
                    invoiceData.subtotal,
                    invoiceData.totalDiscount,
                    invoiceData.cgst,
                    invoiceData.sgst,
                    invoiceData.igst,
                    invoiceData.total,
                    '', '', '', '', '' // Vendor fields (empty for sales)
                ].join(',');
                
                csvData += newRow + "\n";
                await saveDataToStorage(csvData);
                
                // Print after successful save
                window.print();
                
                showMessage('Success', 'New invoice saved and printed successfully!');
            } catch (error) {
                showMessage('Error', 'Failed to save and print invoice: ' + error.message);
            }
        } // Function: printAndSaveSales - Complete

        // PURCHASES PAGE FUNCTIONS
        let purchaseRowCount = 1; // For purchases page, starting with 1 initial row

        function addPurchaseRow() {
            purchaseRowCount++;
            const tableBody = document.getElementById('purchase-table-body');
            const newRow = document.createElement('tr');
            newRow.className = 'medicine-row';
            newRow.innerHTML = `
                <td class="col-no">${purchaseRowCount}</td>
                <td class="col-name"><input type="text" class="medicine-name" placeholder="Medicine name"></td>
                <td class="col-mfr"><input type="text" class="mfr-code" placeholder="MFR"></td>
                <td class="col-hsn"><input type="text" class="hsn-code" placeholder="HSN"></td>
                <td class="col-batch"><input type="text" class="batch-no" placeholder="Batch"></td>
                <td class="col-expiry"><input type="text" class="expiry" placeholder="MM/YY"></td>
                <td class="col-qty"><input type="number" class="quantity" placeholder="Qty" min="1" oninput="calculatePurchaseTotals()"></td>
                <td class="col-rate"><input type="text" class="rate" placeholder="Rate" oninput="calculatePurchaseTotals()"></td>
                <td class="col-disc"><input type="text" class="discount" value="0" oninput="calculatePurchaseTotals()"></td>
                <td class="col-cgst"><input type="number" class="cgst-rate" placeholder="%" min="0" max="100" step="0.01" value="0" oninput="calculatePurchaseTotals()"></td>
                <td class="col-sgst"><input type="number" class="sgst-rate" placeholder="%" min="0" max="100" step="0.01" value="0" oninput="calculatePurchaseTotals()"></td>
                <td class="col-igst"><input type="number" class="igst-rate" value="0" oninput="calculatePurchaseTotals()"></td>
                <td class="col-amount amount">0.00</td>
                <td class="col-action no-print"><button class="btn btn-remove" onclick="removePurchaseRow(this)"><i class="fas fa-times"></i></button></td>
            `;
            tableBody.appendChild(newRow);
            updateRowNumbers('purchase-table-body');
            calculatePurchaseTotals();
        } // Function: addPurchaseRow - Complete

        function removePurchaseRow(button) {
            const row = button.closest('.medicine-row');
            row.remove();
            updateRowNumbers('purchase-table-body');
            purchaseRowCount--;
            calculatePurchaseTotals();
        } // Function: removePurchaseRow - Complete

        function calculatePurchaseTotals() {
            const tableBody = document.getElementById('purchase-table-body');
            const rows = tableBody.getElementsByClassName('medicine-row');
            let subtotal = 0;
            let totalDiscount = 0;
            let totalCGST = 0;
            let totalSGST = 0;
            let totalIGST = 0;

            for (let i = 0; i < rows.length; i++) {
                const row = rows[i];
                const qty = parseFloat(row.querySelector('.quantity').value) || 0;
                const rate = parseFloat(row.querySelector('.rate').value) || 0;
                const discount = parseFloat(row.querySelector('.discount').value) || 0;
                const cgstRate = parseFloat(row.querySelector('.cgst-rate').value) || 0;
                const sgstRate = parseFloat(row.querySelector('.sgst-rate').value) || 0;
                const igstRate = parseFloat(row.querySelector('.igst-rate').value) || 0;

                const itemTotal = qty * rate;
                const discountAmount = itemTotal * (discount / 100);
                const taxableValue = itemTotal - discountAmount;

                const cgstAmount = taxableValue * (cgstRate / 100);
                const sgstAmount = taxableValue * (sgstRate / 100);
                const igstAmount = taxableValue * (igstRate / 100);
                
                const itemAmount = taxableValue + cgstAmount + sgstAmount + igstAmount;

                row.querySelector('.amount').textContent = itemAmount.toFixed(2);

                subtotal += itemTotal;
                totalDiscount += discountAmount;
                totalCGST += cgstAmount;
                totalSGST += sgstAmount;
                totalIGST += igstAmount;
            }

            document.getElementById('purchase-subtotal').textContent = subtotal.toFixed(2);
            document.getElementById('purchase-total-discount').textContent = totalDiscount.toFixed(2);
            document.getElementById('purchase-cgst').textContent = totalCGST.toFixed(2);
            document.getElementById('purchase-sgst').textContent = totalSGST.toFixed(2);
            document.getElementById('purchase-igst').textContent = totalIGST.toFixed(2);
            
            const total = subtotal - totalDiscount + totalCGST + totalSGST + totalIGST;
            document.getElementById('purchase-total').textContent = '₹' + total.toFixed(2);
        } // Function: calculatePurchaseTotals - Complete

        function getPurchaseData() {
            const vendorName = document.getElementById('vendor-name').value;
            const vendorGSTIN = document.getElementById('vendor-gstin').value;
            const vendorAddress = document.getElementById('vendor-address').value;
            const purchaseDate = document.getElementById('purchase-date').value; // Already McFarland-MM-DD from input type="date"
            const purchaseInvoice = document.getElementById('purchase-invoice').value;
            const paymentTerms = document.getElementById('payment-terms').value;

            const medicineRows = document.querySelectorAll('#purchase-table-body .medicine-row');
            const medicines = [];
            medicineRows.forEach(row => {
                const medicine = {
                    name: row.querySelector('.medicine-name').value,
                    mfr: row.querySelector('.mfr-code').value,
                    hsn: row.querySelector('.hsn-code').value,
                    batch: row.querySelector('.batch-no').value,
                    expiry: row.querySelector('.expiry').value,
                    quantity: parseFloat(row.querySelector('.quantity').value) || 0,
                    rate: parseFloat(row.querySelector('.rate').value) || 0,
                    discount: parseFloat(row.querySelector('.discount').value) || 0,
                    cgst: parseFloat(row.querySelector('.cgst-rate').value) || 0,
                    sgst: parseFloat(row.querySelector('.sgst-rate').value) || 0,
                    igst: parseFloat(row.querySelector('.igst-rate').value) || 0,
                    amount: parseFloat(row.querySelector('.amount').textContent) || 0
                };
                medicines.push(medicine);
            });
		
            const subtotal = parseFloat(document.getElementById('purchase-subtotal').textContent) || 0;
            const totalDiscount = parseFloat(document.getElementById('purchase-total-discount').textContent) || 0;
            const cgst = parseFloat(document.getElementById('purchase-cgst').textContent) || 0;
            const sgst = parseFloat(document.getElementById('purchase-sgst').textContent) || 0;
            const igst = parseFloat(document.getElementById('purchase-igst').textContent) || 0;
            const total = parseFloat(document.getElementById('purchase-total').textContent.replace('₹', '')) || 0;

            return {
                type: 'purchase',
                billNo: purchaseInvoice, // Using purchase invoice as billNo for consistency in CSV
                date: purchaseDate,
                time: new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: true }),
                customerName: '', // Not applicable for purchases
                customerAddress: '', // Not applicable for purchases
                paymentMode: '', // Not directly captured in purchase form, could be added
                medicines, // This will be stringified for CSV
                subtotal,
                totalDiscount,
                cgst,
                sgst,
                igst,
                total,
                vendorName,
                vendorGSTIN,
                vendorAddress,
                purchaseInvoice,
                paymentTerms
            };
        } // Function: getPurchaseData - Complete

        async function savePurchase() {
            const purchaseData = getPurchaseData();

            if (!purchaseData.vendorName || !purchaseData.purchaseInvoice || purchaseData.medicines.length === 0 || purchaseData.medicines.some(m => !m.name)) {
                showMessage('Validation Error', 'Vendor Name, Invoice Number, and all medicine entries (name, quantity, rate) are required.', 'alert');
                return;
            }

            try {
                let csvData = await loadDataFromStorage();
                
                // Append new data
                csvData += formatAsCSV(purchaseData) + "\n";
                
                await saveDataToStorage(csvData);
                showMessage('Success', 'Purchase saved successfully!');
            } catch (error) {
                showMessage('Error', 'Failed to save purchase: ' + error.message);
            }
        } // Function: savePurchase - Complete

        function printAndSavePurchase() {
            savePurchase();
            window.print();
        } // Function: printAndSavePurchase - Complete

        // Report related functions
        function showReportType() {
            const salesFilter = document.getElementById('date-range-filter');
            const stockFilter = document.getElementById('stock-date-filter');
            const reportTitle = document.getElementById('current-report-title');
            const reportTable = document.querySelector('#report-page .medicine-table'); // Get the table element

            const selectedReportType = document.querySelector('input[name="report-type"]:checked').value;

            // Remove any existing stock-report class
            reportTable.classList.remove('stock-report');

            if (selectedReportType === 'stock') {
                salesFilter.style.display = 'none';
                stockFilter.style.display = 'flex';
                reportTitle.textContent = 'Stock Report';
                reportTable.classList.add('stock-report'); // Add stock-report class for specific styling
                loadStockReport(document.getElementById('report-stock-date').value);
            } else {
                salesFilter.style.display = 'flex';
                stockFilter.style.display = 'none';
                reportTitle.textContent = selectedReportType === 'sales' ? 'Sales Report' : 'Purchases Report';
                if (selectedReportType === 'sales') {
                    loadSalesReport(document.getElementById('report-from').value, document.getElementById('report-to').value);
                } else if (selectedReportType === 'purchases') {
                    loadPurchasesReport(document.getElementById('report-from').value, document.getElementById('report-to').value);
                }
            }
        }


	 // Function: showReportType - Complete

        // Helper to parse medicine string from CSV
        function parseMedicinesString(medicinesStr) {
	    if (!medicinesStr) return [];
	    return medicinesStr.split(';').map(item => {
	        const parts = item.split('|');
	        return {
	            name: parts[0] || '',
	            mfr: parts[1] || '',
	            hsn: parts[2] || '',
	            batch: parts[3] || '',
	            expiry: parts[4] || '',
	            quantity: parseFloat(parts[5]) || 0,
	            rate: parseFloat(parts[6]) || 0,
	            discount: parseFloat(parts[7]) || 0,
	            cgst: parseFloat(parts[8]) || 0,
	            sgst: parseFloat(parts[9]) || 0,
	            igst: parseFloat(parts[10]) || 0,
	            amount: parseFloat(parts[11]) || 0
	        };
	    });
	}


	 // Function: parseMedicinesString - Complete

        // Add this helper function to format dates for storage (YYYY-MM-DD)
        function formatDateForStorage(dateString) {
            // Assumes dateString is in DD/MM/YYYY format
            const parts = dateString.split('/');
            if (parts.length === 3) {
                return `${parts[2]}-${parts[1].padStart(2, '0')}-${parts[0].padStart(2, '0')}`;
            }
            return dateString; // Return as is if format is unexpected
        } // Function: formatDateForStorage - Complete

        // Add this helper function to format dates for display (DD/MM/YYYY)
        function formatDateForDisplay(dateString) {
            // Assumes dateString is in McFarland-MM-DD format
            if (!dateString) return '';
            const parts = dateString.split('-');
            if (parts.length === 3) {
                return `${parts[2].padStart(2, '0')}/${parts[1].padStart(2, '0')}/${parts[0]}`;
            }
            return dateString; // Return as is if format is unexpected
        } // Function: formatDateForDisplay - Complete

        // Load and calculate sales report
        async function loadSalesReport(fromDate, toDate) {
            try {
                const csvData = await loadDataFromStorage();
                const rows = csvData.split('\n').filter(row => row.trim() !== '');
                const salesList = [];
                
                // Convert input dates to Date objects for comparison
                const fromDateObj = new Date(fromDate);
                const toDateObj = new Date(toDate);
                toDateObj.setHours(23, 59, 59, 999); // Include the entire 'to' day

                // Skip header row
                for (let i = 1; i < rows.length; i++) {
                    try {
                        if (rows[i].trim() === '') continue;
                        
                        const columns = rows[i].split(',');
                        const rowType = columns[0];
                        const date = columns[2]; // This should be in McFarland-MM-DD from storage
                        
                        if (rowType === 'sale') {
                            const rowDate = new Date(date);
                            
                            if (rowDate >= fromDateObj && rowDate <= toDateObj) {
                                let medicinesStr = columns[7];
                                if (medicinesStr.startsWith('"') && medicinesStr.endsWith('"')) {
                                    medicinesStr = medicinesStr.substring(1, medicinesStr.length - 1);
                                }
                                medicinesStr = medicinesStr.replace(/""/g, '"');
                                
                                salesList.push({
                                    type: rowType,
                                    billNo: columns[1].replace(/^"|"$/g, ''), // Clean bill number
                                    date: formatDateForDisplay(date), // Format for display
                                    time: columns[3],
                                    customerName: columns[4].replace(/^"|"$/g, '').replace(/""/g, '"'),
                                    customerAddress: columns[5].replace(/^"|"$/g, '').replace(/""/g, '"'),
                                    paymentMode: columns[6],
                                    medicines: parseMedicinesString(medicinesStr),
                                    subtotal: parseFloat(columns[8]) || 0,
                                    totalDiscount: parseFloat(columns[9]) || 0,
                                    cgst: parseFloat(columns[10]) || 0,
                                    sgst: parseFloat(columns[11]) || 0,
                                    igst: parseFloat(columns[12]) || 0,
                                    total: parseFloat(columns[13]) || 0
                                });
                            }
                        }
                    } catch (error) {
                        console.error(`Error processing row ${i} in loadSalesReport:`, error);
                    }
                }
                generateReport(salesList, 'sales');
            } catch (error) {
                console.error('Error in loadSalesReport:', error);
                showMessage('Error', 'Failed to load sales report: ' + error.message);
            }
        } // Function: loadSalesReport - Complete

        // Load and calculate purchases report
        async function loadPurchasesReport(fromDate, toDate) {
            try {
                const csvData = await loadDataFromStorage();
                const rows = csvData.split('\n').filter(row => row.trim() !== '');
                const purchasesList = [];

                // Convert dates
                const fromDateObj = new Date(fromDate);
                const toDateObj = new Date(toDate);
                toDateObj.setHours(23, 59, 59, 999);

                for (let i = 1; i < rows.length; i++) {
                    const columns = rows[i].split(',');
                    const rowType = columns[0];
                    const date = columns[2]; // Date is in column index 2

                    if (rowType === 'purchase') {
                        const rowDate = new Date(date);
                        if (rowDate >= fromDateObj && rowDate <= toDateObj) {
                            // Unescape vendor data
                            const vendorName = columns[14].replace(/^"|"$/g, '').replace(/""/g, '"');
                            const vendorGSTIN = columns[15].replace(/^"|"$/g, '').replace(/""/g, '"');
                            const vendorAddress = columns[16].replace(/^"|"$/g, '').replace(/""/g, '"');
                            
                            let medicinesStr = columns[7];
                            if (medicinesStr.startsWith('"') && medicinesStr.endsWith('"')) {
                                medicinesStr = medicinesStr.substring(1, medicinesStr.length - 1);
                            }
                            medicinesStr = medicinesStr.replace(/""/g, '"');

                            purchasesList.push({
                                type: rowType,
                                billNo: columns[1].replace(/^"|"$/g, ''), // Invoice number (which is purchaseInvoice from getPurchaseData)
                                date: formatDateForDisplay(date),
                                time: columns[3],
                                vendorName,
                                vendorGSTIN,
                                vendorAddress,
                                medicines: parseMedicinesString(medicinesStr),
                                subtotal: parseFloat(columns[8]) || 0,
                                totalDiscount: parseFloat(columns[9]) || 0,
                                cgst: parseFloat(columns[10]) || 0,
                                sgst: parseFloat(columns[11]) || 0,
                                igst: parseFloat(columns[12]) || 0,
                                total: parseFloat(columns[13]) || 0
                            });
                        }
                    }
                }
                generateReport(purchasesList, 'purchases');
            } catch (error) {
                console.error('Error in loadPurchasesReport:', error);
                showMessage('Error', 'Failed to load purchases report: ' + error.message);
            }
        } // Function: loadPurchasesReport - Complete

        // Load and calculate stock report
        async function loadStockReport(asOfDate) {
            try {
                const csvData = await loadDataFromStorage();
                const rows = csvData.split('\n').filter(row => row.trim() !== '');
                const stockMap = {};

                if (rows.length <= 1) {
                    generateStockReport([]);
                    return;
                }

                const reportDate = new Date(asOfDate);
                reportDate.setHours(23, 59, 59, 999); // Include the entire 'asOfDate'

                for (let i = 1; i < rows.length; i++) {
                    const columns = rows[i].split(',');
                    const recordDate = new Date(columns[2]); 
                    const rowType = columns[0];

                    if (recordDate > reportDate) continue;

                    let medicinesStr = columns[7];
                    if (medicinesStr.startsWith('"') && medicinesStr.endsWith('"')) {
                        medicinesStr = medicinesStr.substring(1, medicinesStr.length - 1);
                    }
                    medicinesStr = medicinesStr.replace(/""/g, '"');
                    const medicinesData = parseMedicinesString(medicinesStr);
                    
                    medicinesData.forEach(med => {
                        const medName = med.name || '';
                        const mfr = med.mfr || '';
                        const hsn = med.hsn || '';
                        const batch = med.batch || '';
                        const expiry = med.expiry || '';
                        const qty = med.quantity || 0;

                        const key = `${medName.toLowerCase()}-${batch.toLowerCase()}`;

                        if (!stockMap[key]) {
                            stockMap[key] = {
                                medicine: medName,
                                mfr: mfr,
                                hsn: hsn,
                                batch: batch,
                                expiry: expiry,
                                purchases: 0,
                                sales: 0,
                                currentStock: 0
                            };
                        }

                        if (rowType === 'purchase') {
                            stockMap[key].purchases += qty;
                            stockMap[key].currentStock += qty;
                        } else if (rowType === 'sale') {
                            stockMap[key].sales += qty;
                            stockMap[key].currentStock -= qty;
                        }
                    });
                }

                const stockList = Object.values(stockMap);
                generateStockReport(stockList);

            } catch (error) {
                console.error('Error in loadStockReport:', error);
                showMessage('Error', 'Failed to load stock report: ' + error.message);
            }
        } // Function: loadStockReport - Complete

	    function generateReport(dataList, reportType) {
	        const thead = document.getElementById('report-head');
	        const tbody = document.getElementById('report-body');
	        const reportTotal = document.getElementById('report-total-value');

	        thead.innerHTML = '';
	        tbody.innerHTML = '';

	        let headerRow;
	        let totalValue = 0;

	        if (reportType === 'sales') {
	            headerRow = document.createElement('tr');
	            ['No', 'Bill No', 'Date', 'Customer', 'Medicine Name', 'MFR', 'HSN', 'Batch', 'Expiry', 'Qty', 'Rate', 'Disc.', 'CGST%', 'SGST%', 'IGST%', 'Amount']
	                .forEach(text => {
	                    const th = document.createElement('th');
	                    th.textContent = text;
	                    thead.appendChild(th); // Append to thead directly
	                });
                
	            dataList.forEach((item, index) => {
	                item.medicines.forEach((med, medIndex) => {
	                    const row = document.createElement('tr');
	                    [
	                        index + 1 + (medIndex > 0 ? '' : ''), // Only show main row number for first medicine
	                        item.billNo,
	                        item.date,
	                        item.customerName,
	                        med.name,
	                        med.mfr,
	                        med.hsn,
	                        med.batch,
	                        med.expiry,
	                        med.quantity,
	                        med.rate.toFixed(2),
	                        med.discount.toFixed(2),
	                        med.cgst.toFixed(2), 
	                        med.sgst.toFixed(2), 
	                        med.igst.toFixed(2), 
	                        med.amount.toFixed(2)
	                    ].forEach(value => {
	                        const td = document.createElement('td');
	                        td.textContent = value;
	                        row.appendChild(td);
	                    });
	                    tbody.appendChild(row);
	                });
	                totalValue += item.total;
	            });
	            reportTotal.textContent = `Total Sales Value: ₹${totalValue.toFixed(2)}`;

	        } 
		else if (reportType === 'purchases') {
            headerRow = document.createElement('tr');
            ['No', 'Inv No', 'Date', 'Vendor', 'Medicine Name', 'MFR', 'HSN', 'Batch', 'Expiry', 'Qty', 'Rate', 'Disc.', 'CGST%', 'SGST%', 'IGST%', 'Amount']
                .forEach(text => {
                    const th = document.createElement('th');
                    th.textContent = text;
                    thead.appendChild(th);
                });
            
            dataList.forEach((item, index) => {
                item.medicines.forEach((med, medIndex) => {
                    const row = document.createElement('tr');
                    [
                        index + 1 + (medIndex > 0 ? '' : ''), 
                        item.billNo,  // Invoice number
                        item.date,
                        item.vendorName,  // Vendor name
                        med.name,
                        med.mfr,
                        med.hsn,
                        med.batch,
                        med.expiry,
                        med.quantity,
                        med.rate.toFixed(2),
                        med.discount.toFixed(2),
                        med.cgst.toFixed(2), 
                        med.sgst.toFixed(2), 
                        med.igst.toFixed(2), 
                        med.amount.toFixed(2)
                    ].forEach(value => {
                        const td = document.createElement('td');
                        td.textContent = value;
                        row.appendChild(td);
                    });
                    tbody.appendChild(row);
                });
                totalValue += item.total;
            });
            reportTotal.textContent = `Total Purchases Value: ₹${totalValue.toFixed(2)}`;
        }
    }


	 // Function: generateReport - Complete

        function generateStockReport(stockList) {
	    const thead = document.getElementById('report-head');
	    const tbody = document.getElementById('report-body');
	    const reportTotal = document.getElementById('report-total-value');

	    thead.innerHTML = '';
	    tbody.innerHTML = '';

	    const headerRow = document.createElement('tr');
	    ['No', 'Medicine', 'MFR', 'HSN', 'Batch', 'Expiry', 'Purchases', 'Sales', 'Current Stock']
	        .forEach(text => {
	            const th = document.createElement('th');
	            th.textContent = text;
	            thead.appendChild(th);
	        });
    
	    stockList.forEach((item, index) => {
	        const row = document.createElement('tr');
	        [
	            index + 1,
	            item.medicine,
	            item.mfr,
	            item.hsn,
	            item.batch,
	            item.expiry,
	            item.purchases,
	            item.sales,
	            item.currentStock
	        ].forEach(value => {
	            const td = document.createElement('td');
	            td.textContent = value;
	            row.appendChild(td);
	        });
	        tbody.appendChild(row);
	    });

	    const totalItems = stockList.length;
	    const totalQty = stockList.reduce((sum, item) => sum + item.currentStock, 0);
	    const totalPurchases = stockList.reduce((sum, item) => sum + item.purchases, 0);
	    const totalSales = stockList.reduce((sum, item) => sum + item.sales, 0);

	    reportTotal.textContent = 
	        `Total Items: ${totalItems} | Current Stock: ${totalQty} | Purchases: ${totalPurchases} | Sales: ${totalSales}`;
	}




		// Function: generateStockReport - Complete

        document.getElementById('report-stock-date').addEventListener('change', function () {
            const selectedType = document.querySelector('input[name="report-type"]:checked').value;
            if (selectedType === 'stock') {
                loadStockReport(this.value);
            }
        });



	 // Event Listener: report-stock-date change - Complete

        document.getElementById('report-from').addEventListener('change', function () {
            const selectedType = document.querySelector('input[name="report-type"]:checked').value;
            if (selectedType === 'sales') {
                loadSalesReport(this.value, document.getElementById('report-to').value);
            } else if (selectedType === 'purchases') {
                loadPurchasesReport(this.value, document.getElementById('report-to').value);
            }
        }); // Event Listener: report-from change - Complete

        document.getElementById('report-to').addEventListener('change', function () {
            const selectedType = document.querySelector('input[name="report-type"]:checked').value;
            if (selectedType === 'sales') {
                loadSalesReport(document.getElementById('report-from').value, this.value);
            } else if (selectedType === 'purchases') {
                loadPurchasesReport(document.getElementById('report-from').value, this.value);
            }
        }); // Event Listener: report-to change - Complete

        function printReport() {
            window.print();
        }



	 // Function: printReport - Complete

        async function exportToCSV() {
            try {
                const csvData = await loadDataFromStorage();
                const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8;' });
                const url = URL.createObjectURL(blob);
                
                const a = document.createElement('a');
                a.href = url;
                a.download = `MBill-Report-${new Date().toISOString().slice(0,10)}.csv`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
                
                showMessage('Export Successful', 'Report CSV downloaded successfully.');
            } catch (error) {
                showMessage('Error', 'Failed to export CSV: ' + error.message);
            }
        } // Function: exportToCSV - Complete

        // Data Management Functions
        async function createBackupFile() {
            try {
                const csvData = await loadDataFromStorage();
                const blob = new Blob([csvData], { type: 'text/csv' });
                const url = URL.createObjectURL(blob);
                
                const a = document.createElement('a');
                a.href = url;
                a.download = `MBill-Backup-${new Date().toISOString().slice(0,10)}.csv`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
                
                showMessage('Backup Created', 'Backup file downloaded successfully.');
            } catch (error) {
                showMessage('Error', 'Failed to create backup: ' + error.message);
            }
        } // Function: createBackupFile - Complete

        function restoreBackupFile() {
            const fileInput = document.getElementById('backup-file');
            const file = fileInput.files[0];

            if (!file) {
                showMessage('No File Selected', 'Please select a backup file to restore.', 'alert');
                return;
            }

            if (file.type !== 'text/csv') {
                showMessage('Invalid File Type', 'Please upload a CSV file.', 'alert');
                return;
            }

            const reader = new FileReader();

            reader.onload = async function(e) {
                const csvData = e.target.result;
                showMessage('Confirm Restore', 'Restoring from backup will overwrite your current data. Continue?', 'confirm', async (confirmed) => {
                    if (confirmed) {
                        try {
                            // Validate header of the uploaded CSV
                            const lines = csvData.split('\n');
                            if (lines.length > 0 && lines[0].trim() !== CSV_HEADER.trim()) {
                                showMessage('Invalid File Format', 'The uploaded file does not have the expected header. Please upload a valid backup CSV.', 'alert');
                                return;
                            }
                            await saveDataToStorage(csvData);
                            showMessage('Restore Success', 'Data restored successfully from backup.');
                            fileInput.value = ''; // Clear the file input
                            // Reload current page data if applicable
                            const currentPage = document.querySelector('.page-content:not([style*="display: none"])').id.replace('-page', '');
                            showPage(currentPage); // Re-render the current page with new data
                        } catch (error) {
                            showMessage('Error', 'Failed to restore backup: ' + error.message);
                        }
                    }
                });
            };
            reader.readAsText(file);
        } // Function: restoreBackupFile - Complete

        async function confirmDeleteByInvoice() {
            const type = document.getElementById('delete-transaction-type').value;
            const invoiceNumber = document.getElementById('delete-invoice-number').value.trim();

            if (!invoiceNumber) {
                showMessage('Input Required', 'Please enter an invoice number to delete.', 'alert');
                return;
            }

            showMessage('Confirm Delete', `Are you sure you want to delete ${type} invoice: ${invoiceNumber}? This action cannot be undone.`, 'confirm', async (confirmed) => {
                if (confirmed) {
                    try {
                        let csvData = await loadDataFromStorage();
                        const lines = csvData.split('\n');
                        const header = lines[0];
                        const newLines = [header];
                        
                        for (let i = 1; i < lines.length; i++) {
                            if (lines[i].trim() === '') continue;
                            const cols = lines[i].split(',');
                            // Check if the row type and invoice number match
                            // For sales, billNo is columns[1]
                            // For purchases, purchaseInvoice is columns[17]
                            const currentInvoiceNo = (cols[0] === 'sale') ? cols[1].replace(/^"|"$/g, '') : cols[17].replace(/^"|"$/g, '');
                            
                            if (!(cols[0] === type && currentInvoiceNo === invoiceNumber)) {
                                newLines.push(lines[i]);
                            }
                        }
                        
                        const newCsvData = newLines.join('\n');
                        await saveDataToStorage(newCsvData);
                        showMessage('Delete Success', 'Invoice deleted successfully.');
                        document.getElementById('delete-invoice-number').value = '';
                        // Reload current page data if applicable
                        const currentPage = document.querySelector('.page-content:not([style*="display: none"])').id.replace('-page', '');
                        showPage(currentPage);
                    } catch (error) {
                        showMessage('Error', 'Failed to delete invoice: ' + error.message);
                    }
                }
            });
        } // Function: confirmDeleteByInvoice - Complete

        async function confirmDeleteByDateRange() {
            const type = document.getElementById('delete-date-type').value;
            const fromDate = document.getElementById('delete-from-date').value;
            const toDate = document.getElementById('delete-to-date').value;

            if (!fromDate || !toDate) {
                showMessage('Input Required', 'Please select both From and To dates to delete by range.', 'alert');
                return;
            }

            showMessage('Confirm Delete', `Are you sure you want to delete ${type} transactions from ${fromDate} to ${toDate}? This action cannot be undone.`, 'confirm', async (confirmed) => {
                if (confirmed) {
                    try {
                        let csvData = await loadDataFromStorage();
                        const lines = csvData.split('\n');
                        const header = lines[0];
                        const newLines = [header];
                        
                        const fromDateObj = new Date(fromDate);
                        const toDateObj = new Date(toDate);
                        toDateObj.setHours(23, 59, 59, 999); // Include the entire 'to' day

                        for (let i = 1; i < lines.length; i++) {
                            if (lines[i].trim() === '') continue;
                            const cols = lines[i].split(',');
                            const rowType = cols[0];
                            const transactionDate = new Date(cols[2]); // Assuming date is in column 2 (YYYY-MM-DD)
                            
                            let shouldKeep = true;
                            if (transactionDate >= fromDateObj && transactionDate <= toDateObj) {
                                if (type === 'both') {
                                    shouldKeep = false;
                                } else if (rowType === type) {
                                    shouldKeep = false;
                                }
                            }
                            
                            if (shouldKeep) {
                                newLines.push(lines[i]);
                            }
                        }
                        
                        const newCsvData = newLines.join('\n');
                        await saveDataToStorage(newCsvData);
                        showMessage('Delete Success', 'Transactions deleted successfully.');
                        // Reload current page data if applicable
                        const currentPage = document.querySelector('.page-content:not([style*="display: none"])').id.replace('-page', '');
                        showPage(currentPage);
                    } catch (error) {
                        showMessage('Error', 'Failed to delete transactions: ' + error.message);
                    }
                }
            });
        } // Function: confirmDeleteByDateRange - Complete

        async function confirmDeleteAll() {
            const adminPassword = document.getElementById('admin-password').value;

            if (adminPassword !== 'DELETE ALL') { // Simple hardcoded password for demonstration
                showMessage('Incorrect Password', 'Please type "DELETE ALL" (case-sensitive) to confirm.', 'alert');
                return;
            }

            showMessage('Confirm Delete All Data', 'This will permanently delete ALL sales and purchase transactions. This action cannot be undone. Enter "DELETE ALL" to confirm.', 'confirm', async (confirmed) => {
                if (confirmed) {
                    try {
                        // Clear the entire file (keep headers)
                        const newCsvData = CSV_HEADER;
                        
                        await saveDataToStorage(newCsvData);
                        showMessage('Delete Success', 'All data has been deleted successfully.');
                        document.getElementById('admin-password').value = '';
                        // Reload current page data if applicable
                        const currentPage = document.querySelector('.page-content:not([style*="display: none"])').id.replace('-page', '');
                        showPage(currentPage);
                    } catch (error) {
                        showMessage('Error', 'Failed to delete all data: ' + error.message);
                    }
                }
            });
        } // Function: confirmDeleteAll - Complete

        /**
         * Auto-fills medicine details based on the medicine name entered.
         * It searches through purchase and opening stock data.
         * If multiple batches are found, it prompts the user to select one.
         * @param {HTMLInputElement} inputElement The input field where medicine name is entered.
         */
	    async function autoFillMedicineDetails(inputElement) {
            const medicineName = inputElement.value.trim();
            const currentRow = inputElement.closest('.medicine-row');
            
            // Clear previous values in the current row
            currentRow.querySelector('.mfr-code').value = '';
            currentRow.querySelector('.hsn-code').value = '';
            currentRow.querySelector('.batch-no').value = '';
            currentRow.querySelector('.expiry').value = '';
            currentRow.querySelector('.quantity').value = '';
            currentRow.querySelector('.quantity').removeAttribute('max');
            currentRow.querySelector('.rate').value = '';
            currentRow.querySelector('.cgst-rate').value = '0';
            currentRow.querySelector('.sgst-rate').value = '0';
            currentRow.querySelector('.igst-rate').value = '0';
            calculateInvoiceTotals();

            if (medicineName.length < 2) { // Require at least 2 characters for search
                return;
            }

            try {
                const csvData = await loadDataFromStorage();
                const rows = csvData.split('\n').filter(row => row.trim() !== '');
                const matchingBatches = [];

                if (rows.length <= 1) {
                    // No data available - don't show error to avoid interrupting typing
                    return;
                }

                const today = new Date();
                today.setHours(23, 59, 59, 999); // Consider end of today for stock calculation

                // Load stock report to get current stock for each batch
                const stockMap = {};
                for (let i = 1; i < rows.length; i++) {
                    const columns = rows[i].split(',');
                    const recordDate = new Date(columns[2]); // Assuming McFarland-MM-DD from storage
                    const rowType = columns[0]; // 'sale' or 'purchase'

                    // Only consider records up to today's date for stock calculation
                    if (recordDate > today) continue;

                    let medicinesStr = columns[7];
                    if (medicinesStr.startsWith('"') && medicinesStr.endsWith('"')) {
                        medicinesStr = medicinesStr.substring(1, medicinesStr.length - 1);
                    }
                    medicinesStr = medicinesStr.replace(/""/g, '"');
                    const medicinesData = parseMedicinesString(medicinesStr);
                    
                    medicinesData.forEach(med => {
                        const medName = med.name || '';
                        const mfr = med.mfr || '';
                        const hsn = med.hsn || '';
                        const batch = med.batch || '';
                        const expiry = med.expiry || '';
                        const qty = med.quantity || 0;
                        const rate = med.rate || 0;
                        const cgst = med.cgst || 0;
                        const sgst = med.sgst || 0;
                        const igst = med.igst || 0;

                        const key = `${medName.toLowerCase()}-${batch.toLowerCase()}`;

                        if (!stockMap[key]) {
			    stockMap[key] = {
			        medicine: medName,
			        mfr: mfr,
			        hsn: hsn,
			        batch: batch,
			        expiry: expiry,
			        rate: rate,
			        cgst: cgst,
			        sgst: sgst,
			        igst: igst,
			        purchases: 0,
			        sales: 0,
			        currentStock: 0
			    };
			}

			if (rowType === 'purchase') {
					stockMap[key].purchases += qty;
				        stockMap[key].currentStock += qty;
					} else if (rowType === 'sale') {
					stockMap[key].sales += qty;
					stockMap[key].currentStock -= qty;
					}
			                    });
			                }

                // Filter for matching medicine names and available stock
                for (const key in stockMap) {
                    const item = stockMap[key];
                    if (item.medicine.toLowerCase().includes(medicineName.toLowerCase()) && item.currentStock > 0) {
                        matchingBatches.push(item);
                    }
                }

                if (matchingBatches.length === 0) {
                    // Don't show message here to avoid interrupting typing flow
                    return;
                } else if (matchingBatches.length === 1) {
                    // Auto-fill if only one exact match
                    if (matchingBatches[0].medicine.toLowerCase() === medicineName.toLowerCase()) {
                        applySelectedBatchToRow(matchingBatches[0], currentRow);
                    }
                } else {
                    // Sort batches by expiry date (earliest first) and then by medicine name
                    matchingBatches.sort((a, b) => {
                        // First sort by medicine name
                        const nameCompare = a.medicine.localeCompare(b.medicine);
                        if (nameCompare !== 0) return nameCompare;
                        
                        // Then by expiry date (MM/YY)
                        const [aMonth, aYear] = a.expiry.split('/').map(Number);
                        const [bMonth, bYear] = b.expiry.split('/').map(Number);
                        // Convert to full year (assuming 20xx)
                        const fullYearA = aYear < 50 ? 2000 + aYear : 1900 + aYear;
                        const fullYearB = bYear < 50 ? 2000 + bYear : 1900 + bYear;

                        const dateA = new Date(fullYearA, aMonth - 1);
                        const dateB = new Date(fullYearB, bMonth - 1);
                        return dateA - dateB;
                    });

                    // If exact match exists, auto-fill the first one
                    const exactMatch = matchingBatches.find(b => b.medicine.toLowerCase() === medicineName.toLowerCase());
                    if (exactMatch) {
                        applySelectedBatchToRow(exactMatch, currentRow);
                    } else {
                        // Show batch selection modal only if user hasn't selected from suggestions
                        const container = inputElement.closest('.suggestions-container');
                        const suggestionsList = container.querySelector('.suggestions-list');
                        if (suggestionsList.style.display === 'none') { // Only show modal if suggestions list is not active
                            showBatchSelectionModal(medicineName, matchingBatches, currentRow);
                        }
                    }
                }

            } catch (error) {
                console.error('Error in autoFillMedicineDetails:', error);
                // Don't show error to user during typing
            }
        } // Function: autoFillMedicineDetails - Complete

        let originalInvoiceData = null;

        async function loadInvoiceByBillNumber() {
            const billNumber = document.getElementById('search-bill-number').value.trim();
            if (!billNumber) {
                showMessage('Error', 'Please enter a valid Bill Number to search.');
                return;
            }

            try {
                const csvData = await loadDataFromStorage();
                const rows = csvData.trim().split('\n');
                const dataRows = rows.slice(1);

                const invoiceRow = dataRows.find(row => {
                    const columns = row.split(',');
                    // Remove quotes from stored bill number for comparison
                    const storedBillNo = columns[1].replace(/^"|"$/g, ''); 
                    return storedBillNo === billNumber && columns[0] === 'sale';
                });

                if (!invoiceRow) {
                    showMessage('Not Found', `No invoice found with Bill Number: ${billNumber}`);
                    return;
                }

                const columns = invoiceRow.split(',');
                
                // Store original data
                originalInvoiceData = {
                    billNo: columns[1].replace(/^"|"$/g, ''), // Clean bill number
                    date: columns[2], // McFarland-MM-DD
                    time: columns[3],
                    customerName: columns[4].replace(/^"|"$/g, '').replace(/""/g, '"'),
                    customerAddress: columns[5].replace(/^"|"$/g, '').replace(/""/g, '"'),
                    paymentMode: columns[6],
                    medicines: parseMedicinesString(columns[7].replace(/^"|"$/g, '').replace(/""/g, '"')),
                    subtotal: parseFloat(columns[8]) || 0,
                    totalDiscount: parseFloat(columns[9]) || 0,
                    cgst: parseFloat(columns[10]) || 0,
                    sgst: parseFloat(columns[11]) || 0,
                    igst: parseFloat(columns[12]) || 0,
                    total: parseFloat(columns[13]) || 0
                };

                // Load with original data first
                document.getElementById('invoice-bill-no').textContent = originalInvoiceData.billNo;
                document.getElementById('invoice-date2').textContent = formatDateForDisplay(originalInvoiceData.date); // Format for display
                document.getElementById('invoice-time').textContent = originalInvoiceData.time;
                document.getElementById('customer-name').value = originalInvoiceData.customerName;
                document.getElementById('customer-address').value = originalInvoiceData.customerAddress;
                document.getElementById('payment-mode').value = originalInvoiceData.paymentMode;

                const tableBody = document.getElementById('medicine-table-body');
                tableBody.innerHTML = ''; // Clear existing rows

                originalInvoiceData.medicines.forEach((med, index) => {
                    const newRow = document.createElement('tr');
                    newRow.className = 'medicine-row';
                    newRow.innerHTML = `
                        <td class="col-no">${index + 1}</td>
                        <td class="col-name">
                            <div class="suggestions-container">
                                <input type="text" class="medicine-name" value="${med.name || ''}" oninput="showMedicineSuggestions(this); checkForModifications()" onkeydown="handleSuggestionNavigation(event, this)" onfocus="showMedicineSuggestions(this)">
                                <div class="suggestions-list"></div>
                            </div>
                        </td>
                        <td class="col-mfr"><input type="text" class="mfr-code" value="${med.mfr || ''}" readonly></td>
                        <td class="col-hsn"><input type="text" class="hsn-code" value="${med.hsn || ''}" readonly></td>
                        <td class="col-batch"><input type="text" class="batch-no" value="${med.batch || ''}" readonly></td>
                        <td class="col-expiry"><input type="text" class="expiry" value="${med.expiry || ''}" readonly></td>
                        <td class="col-qty"><input type="number" class="quantity" value="${med.quantity || 0}" min="1" oninput="calculateInvoiceTotals(); checkForModifications()"></td>
                        <td class="col-rate"><input type="text" class="rate" value="${med.rate || 0}" oninput="calculateInvoiceTotals(); checkForModifications()"></td>
                        <td class="col-disc"><input type="text" class="discount" value="${med.discount || 0}" oninput="calculateInvoiceTotals(); checkForModifications()"></td>
                        <td class="col-cgst"><input type="number" class="cgst-rate" value="${med.cgst || 0}" oninput="calculateInvoiceTotals(); checkForModifications()"></td>
                        <td class="col-sgst"><input type="number" class="sgst-rate" value="${med.sgst || 0}" oninput="calculateInvoiceTotals(); checkForModifications()"></td>
                        <td class="col-igst"><input type="number" class="igst-rate" value="${med.igst || 0}" oninput="calculateInvoiceTotals(); checkForModifications()"></td>
                        <td class="col-amount amount">${parseFloat(med.amount || 0).toFixed(2)}</td>
                        <td class="col-action no-print"><button class="btn btn-remove" onclick="removeRow(this)"><i class="fas fa-times"></i></button></td>
                    `;
                    tableBody.appendChild(newRow);
                    initializeAutofillForRow(newRow); // Re-initialize autofill for loaded rows
                });

                // Ensure at least two rows are present if the loaded invoice had fewer
                while (tableBody.children.length < 2) {
                    addNewRow();
                }

                calculateInvoiceTotals();
                showMessage('Invoice Loaded', `Invoice ${originalInvoiceData.billNo} has been loaded. Make changes to create a new invoice.`);
            } catch (error) {
                console.error('Error loading invoice by bill number:', error);
                showMessage('Error', 'Failed to load invoice: ' + error.message);
            }
        } // Function: loadInvoiceByBillNumber - Complete

        function clearAllData() {
    // Get the currently active page
    const activePage = document.querySelector('.page-content:not([style*="display: none"])').id;
    
    // Only proceed if we're on invoice, purchases, or tracker page
    if (activePage !== 'invoice-page' && activePage !== 'purchases-page' && activePage !== 'tracker-page') {
        showMessage('Action Not Allowed', 'Clear All can only be used in Invoice, Purchases, and Tracker tabs.', 'alert');
        return;
    }

    showMessage('Confirm Clear All', 'This will reset all form data. Are you sure?', 'confirm', (confirmed) => {
        if (confirmed) {
            if (activePage === 'invoice-page') {
                // Clear invoice page data
                document.getElementById('customer-name').value = '';
                document.getElementById('customer-address').value = '';
                const tableBody = document.getElementById('medicine-table-body');
                tableBody.innerHTML = ''; // Clear all existing rows
                rowCount = 0; // Reset row count
                addNewRow(); // Add first default row
                addNewRow(); // Add second default row
                document.getElementById('payment-mode').value = 'Cash';
                calculateInvoiceTotals();
                // Reset originalInvoiceData
                originalInvoiceData = null;
                // Generate a new invoice number for the cleared form
                generateNewInvoiceNumber().then(newBillNo => {
                    document.getElementById('invoice-bill-no').textContent = newBillNo;
                    updateInvoiceDateTime();
                });
            } 
            else if (activePage === 'purchases-page') {
                // Clear purchases page data
                document.getElementById('vendor-name').value = '';
                document.getElementById('vendor-gstin').value = '';
                document.getElementById('vendor-address').value = '';
                document.getElementById('purchase-date').valueAsDate = new Date();
                document.getElementById('purchase-invoice').value = '';
                document.getElementById('payment-terms').value = 'Immediate Payment';
                const tableBody = document.getElementById('purchase-table-body');
                tableBody.innerHTML = ''; // Clear all existing rows
                purchaseRowCount = 0; // Reset purchase row count
                addPurchaseRow(); // Add first default row
                calculatePurchaseTotals();
            }
            else if (activePage === 'tracker-page') {
                // Clear tracker page filters
                document.getElementById('tracker-type').value = '';
                document.getElementById('tracker-medicine-name').value = '';
                document.getElementById('tracker-customer-vendor').value = '';
                document.getElementById('tracker-batch').value = '';
                document.getElementById('filter-expiry-month-year').value = '';
                document.getElementById('tracker-from-date').value = '';
                document.getElementById('tracker-to-date').value = '';
                
                // Clear tracker table
                document.getElementById('tracker-table-body').innerHTML = '';
                
                // Optionally, you could re-apply filters to show all data
                // applyFilters();
            }
        }
    });
}

	 // Function: clearAllData - Complete

        async function generateNewInvoiceNumber() {
            const today = new Date();
            const year = today.getFullYear().toString().slice(-2);
            const month = String(today.getMonth() + 1).padStart(2, '0');
            const day = String(today.getDate()).padStart(2, '0');
            
            let isUnique = false;
            let newNumber = '';
            
            // Keep generating until we find a unique number
            while (!isUnique) {
                // Generate a random 3-digit suffix
                const randomSuffix = Math.floor(Math.random() * 900) + 100;
                newNumber = `MED${year}${month}${day}-${randomSuffix}`;
                
                // Check if this number already exists
                isUnique = !(await invoiceNumberExists(newNumber));
            }
            
            return newNumber;
        } // Function: generateNewInvoiceNumber - Complete

        function hasInvoiceBeenModified(originalData) {
            // Check if original data exists
            if (!originalData) return false;
            
            // Get current customer details
            let currentCustomerName = document.getElementById('customer-name').value;
            // Remove modification notes for comparison
            currentCustomerName = currentCustomerName.replace(/ \(Modified from .*\)$/, '')
                                                     .replace(/ \(Loaded from .*\)$/, '');

            const currentCustomerAddress = document.getElementById('customer-address').value;
            const currentPaymentMode = document.getElementById('payment-mode').value;
            
            // Check customer info changes (ignore the "Modified from" note if present)
            const originalCustomerName = originalData.customerName.replace(/ \(Modified from .*\)$/, ''); // Clean original name too
            if (currentCustomerName !== originalCustomerName ||
                currentCustomerAddress !== originalData.customerAddress ||
                currentPaymentMode !== originalData.paymentMode) {
                return true;
            }

            // Check medicine rows count
            const currentRows = document.querySelectorAll('#medicine-table-body .medicine-row');
            if (currentRows.length !== originalData.medicines.length) {
                return true;
            }

            // Check each medicine row
            for (let i = 0; i < currentRows.length; i++) {
                const row = currentRows[i];
                const originalMed = originalData.medicines[i];
                
                if (row.querySelector('.medicine-name').value !== originalMed.name ||
                    parseFloat(row.querySelector('.quantity').value) !== originalMed.quantity ||
                    parseFloat(row.querySelector('.rate').value) !== originalMed.rate ||
                    parseFloat(row.querySelector('.discount').value) !== originalMed.discount ||
                    parseFloat(row.querySelector('.cgst-rate').value) !== originalMed.cgst ||
                    parseFloat(row.querySelector('.sgst-rate').value) !== originalMed.sgst ||
                    parseFloat(row.querySelector('.igst-rate').value) !== originalMed.igst) {
                    return true;
                }
            }

            return false;
        } // Function: hasInvoiceBeenModified - Complete

        function checkForModifications() {
            if (!originalInvoiceData) return;
            
            if (hasInvoiceBeenModified(originalInvoiceData)) {
                // Get current customer name without modification note if it exists
                let currentName = document.getElementById('customer-name').value;
                currentName = currentName.replace(/ \(Modified from .*\)$/, '')
                                         .replace(/ \(Loaded from .*\)$/, '');
                
                // Add modified note only if not already present
                if (!currentName.includes('(Modified from') && !currentName.includes('(Loaded from')) {
                    document.getElementById('customer-name').value = 
                        currentName + ` (Modified from ${originalInvoiceData.billNo})`;
                }
            } else {
                // If no modifications, revert customer name to original loaded name
                if (originalInvoiceData) {
                    document.getElementById('customer-name').value = originalInvoiceData.customerName;
                }
            }
            calculateInvoiceTotals();
        } // Function: checkForModifications - Complete

        async function invoiceNumberExists(billNo) {
            try {
                const csvData = await loadDataFromStorage();
                const rows = csvData.trim().split('\n');
                
                // Skip header row
                for (let i = 1; i < rows.length; i++) {
                    if (rows[i].trim() === '') continue;
                    const columns = rows[i].split(',');
                    // Remove quotes from stored bill number for comparison
                    const storedBillNo = columns[1].replace(/^"|"$/g, '');
                    if (columns[0] === 'sale' && storedBillNo === billNo) {
                        return true;
                    }
                }
                return false;
            } catch (error) {
                console.error('Error checking invoice number:', error);
                return false;
            }
        } // Function: invoiceNumberExists - Complete

        function updateInvoiceDateTime() {
            const today = new Date();
            const formattedDate = today.toLocaleDateString('en-GB');
            const formattedTime = today.toLocaleTimeString('en-US', { 
                hour: '2-digit', 
                minute: '2-digit', 
                hour12: true 
            });
            
            document.getElementById('invoice-date2').textContent = formattedDate;
            document.getElementById('invoice-time').textContent = formattedTime;
        } // Function: updateInvoiceDateTime - Complete

        // Global variable to store medicine names cache
        let medicineNamesCache = [];

        // Function to load all medicine names from data
        async function loadMedicineNamesCache() {
            try {
                const csvData = await loadDataFromStorage();
                const rows = csvData.split('\n').filter(row => row.trim() !== '');
                
                // Clear cache before repopulating
                medicineNamesCache = [];

                // Skip header row
                for (let i = 1; i < rows.length; i++) {
                    const columns = rows[i].split(',');
                    if (columns.length > 7) {
                        // Unescape medicine string
                        let medicinesStr = columns[7];
                        if (medicinesStr.startsWith('"') && medicinesStr.endsWith('"')) {
                            medicinesStr = medicinesStr.substring(1, medicinesStr.length - 1);
                        }
                        medicinesStr = medicinesStr.replace(/""/g, '"');
                        
                        const medicines = parseMedicinesString(medicinesStr);
                        
                        medicines.forEach(med => {
                            if (med.name && !medicineNamesCache.includes(med.name)) {
                                medicineNamesCache.push(med.name);
                            }
                        });
                    }
                }
            } catch (error) {
                console.error('Error loading medicine names:', error);
            }
        } // Function: loadMedicineNamesCache - Complete

        // Show suggestions while typing
        function showMedicineSuggestions(inputElement) {
            const searchTerm = inputElement.value.toLowerCase();
            const container = inputElement.closest('.suggestions-container');
            const suggestionsList = container.querySelector('.suggestions-list');
            
            // Clear previous suggestions
            suggestionsList.innerHTML = '';
            
            if (searchTerm.length < 2) {
                suggestionsList.style.display = 'none';
                return;
            }
            
            // Filter matching medicine names
            const matches = medicineNamesCache.filter(name => 
                name.toLowerCase().includes(searchTerm)
            ).slice(0, 10); // Limit to 10 suggestions
            
            if (matches.length === 0) {
                suggestionsList.style.display = 'none';
                return;
            }
            
            // Add matching suggestions
            matches.forEach(match => {
                const item = document.createElement('div');
                item.className = 'suggestion-item';
                item.textContent = match;
                item.onclick = () => {
                    inputElement.value = match;
                    suggestionsList.style.display = 'none';
                    autoFillMedicineDetails(inputElement); // Fill other details
                };
                suggestionsList.appendChild(item);
            });
            
            suggestionsList.style.display = 'block';
        } // Function: showMedicineSuggestions - Complete

        // Handle keyboard navigation in suggestions
        function handleSuggestionNavigation(event, inputElement) {
            const container = inputElement.closest('.suggestions-container');
            const suggestionsList = container.querySelector('.suggestions-list');
            const items = suggestionsList.querySelectorAll('.suggestion-item');
            
            if (!items.length || suggestionsList.style.display === 'none') return;
            
            let currentIndex = -1;
            items.forEach((item, index) => {
                if (item.classList.contains('highlighted')) {
                    currentIndex = index;
                    item.classList.remove('highlighted');
                }
            });
            
            if (event.key === 'ArrowDown') {
                event.preventDefault();
                const nextIndex = (currentIndex + 1) % items.length;
                items[nextIndex].classList.add('highlighted');
                items[nextIndex].scrollIntoView({ block: 'nearest' });
            } else if (event.key === 'ArrowUp') {
                event.preventDefault();
                const prevIndex = (currentIndex - 1 + items.length) % items.length;
                items[prevIndex].classList.add('highlighted');
                items[prevIndex].scrollIntoView({ block: 'nearest' });
            } else if (event.key === 'Enter' && currentIndex >= 0) {
                event.preventDefault();
                inputElement.value = items[currentIndex].textContent;
                suggestionsList.style.display = 'none';
                autoFillMedicineDetails(inputElement);
            } else if (event.key === 'Escape') {
                suggestionsList.style.display = 'none';
            }
        } // Function: handleSuggestionNavigation - Complete

        // Close suggestions when clicking outside
        document.addEventListener('click', function(event) {
            if (!event.target.closest('.suggestions-container')) {
                document.querySelectorAll('.suggestions-list').forEach(list => {
                    list.style.display = 'none';
                });
            }
        }); // Event Listener: document click - Complete

        // Customer data management
        const CUSTOMER_STORAGE_KEY = 'customerData';

        async function loadCustomerData() {
            let customerData = localStorage.getItem(CUSTOMER_STORAGE_KEY);
            return customerData ? JSON.parse(customerData) : [];
        } // Function: loadCustomerData - Complete

        async function saveCustomerData(data) {
            localStorage.setItem(CUSTOMER_STORAGE_KEY, JSON.stringify(data));
        } 
	// Function: saveCustomerData - Complete

        async function getCustomerByName(name) {
            const customers = await loadCustomerData();
            return customers.find(c => c.name.toLowerCase() === name.toLowerCase());
        } // Function: getCustomerByName - Complete

        // Customer autofill functions
        async function showCustomerSuggestions(inputElement) {
            const searchTerm = inputElement.value.toLowerCase();
            const suggestionsList = document.getElementById('customer-suggestions');
            suggestionsList.innerHTML = '';
            
            if (searchTerm.length < 2) {
                suggestionsList.style.display = 'none';
                return;
            }
            
            const salesCustomers = await getCustomerNamesFromSalesData();
            const customerData = await loadCustomerData();
            const allCustomers = [...new Set([
                ...salesCustomers,
                ...customerData.map(c => c.name)
            ])];

            const matches = allCustomers.filter(name => 
                name.toLowerCase().includes(searchTerm)
            ).slice(0, 5);
            
            if (matches.length === 0) {
                suggestionsList.style.display = 'none';
                return;
            }
            
            matches.forEach(customerName => { // Changed parameter name to customerName
                const item = document.createElement('div');
                item.className = 'suggestion-item';
                item.textContent = customerName;
                item.onclick = async () => { // Made onclick async
                    await selectCustomer(customerName); // Pass the name string
                    suggestionsList.style.display = 'none';
                    checkForModifications(); // Call this after selecting a customer
                };
                suggestionsList.appendChild(item);
            });
            
            suggestionsList.style.display = 'block';
        } // Function: showCustomerSuggestions - Complete

        async function selectCustomer(name) { // Made function async
            document.getElementById('customer-name').value = name;
            
            // Try to find in customer data first
            const customers = await loadCustomerData();
            const customer = customers.find(c => c.name === name);
            
            if (customer) {
                // Build address from customer data
                let address = customer.address || '';
                if (customer.gstin) address += `\nGSTIN: ${customer.gstin}`;
                if (customer.licenses && customer.licenses.length > 0) {
                    address += `\nLicenses: ${customer.licenses.map(l => `${l.type}: ${l.number}`).join(', ')}`;
                }
                if (customer.mobile) address += `\nMobile: ${customer.mobile}`;
                if (customer.email) address += `\nEmail: ${customer.email}`;
                document.getElementById('customer-address').value = address;
            } else {
                // If not found in customerData, try to get address from sales data
                const csvData = await loadDataFromStorage();
                const rows = csvData.split('\n').filter(row => row.trim() !== '');
                let foundAddress = '';

                for (let i = 1; i < rows.length; i++) {
                    const columns = rows[i].split(',');
                    if (columns[0] === 'sale') {
                        const storedCustomerName = columns[4].replace(/^"|"$/g, '').replace(/""/g, '"');
                        if (storedCustomerName === name) {
                            foundAddress = columns[5].replace(/^"|"$/g, '').replace(/""/g, '"');
                            break; // Found the address, no need to continue
                        }
                    }
                }
                document.getElementById('customer-address').value = foundAddress;
            }
        } // Function: selectCustomer - Complete

        // Customer form functions
        function openCustomerForm() {
            document.getElementById('customerFormModal').style.display = 'flex';
            // Clear the form fields when opening
            document.getElementById('customer-form-name').value = '';
            document.getElementById('customer-form-address').value = '';
            document.getElementById('customer-form-gstin').value = '';
            document.getElementById('license-container').innerHTML = `
                <div class="license-entry">
                    <input type="text" placeholder="License Type" class="license-type">
                    <input type="text" placeholder="License Number" class="license-number">
                    <button type="button" class="btn btn-remove" onclick="removeLicense(this)">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            `;
            document.getElementById('customer-form-mobile').value = '';
            document.getElementById('customer-form-email').value = '';
        } // Function: openCustomerForm - Complete

        function closeCustomerForm() {
            document.getElementById('customerFormModal').style.display = 'none';
        } // Function: closeCustomerForm - Complete

        function addLicense() {
            const container = document.getElementById('license-container');
            const newEntry = document.createElement('div');
            newEntry.className = 'license-entry';
            newEntry.innerHTML = `
                <input type="text" placeholder="License Type" class="license-type">
                <input type="text" placeholder="License Number" class="license-number">
                <button type="button" class="btn btn-remove" onclick="removeLicense(this)">
                    <i class="fas fa-times"></i>
                </button>
            `;
            container.appendChild(newEntry);
        }



 // Function: addLicense - Complete

        function removeLicense(button) {
            button.closest('.license-entry').remove();
        } // Function: removeLicense - Complete

        async function saveCustomer() {
            const name = document.getElementById('customer-form-name').value.trim();
            if (!name) {
                showMessage('Error', 'Customer name is required', 'alert');
                return;
            }
            
            const customer = {
                name,
                address: document.getElementById('customer-form-address').value,
                gstin: document.getElementById('customer-form-gstin').value,
                licenses: [],
                mobile: document.getElementById('customer-form-mobile').value,
                email: document.getElementById('customer-form-email').value
            };
            
            // Collect licenses
            document.querySelectorAll('#license-container .license-entry').forEach(entry => { // Added #license-container for specificity
                const type = entry.querySelector('.license-type').value;
                const number = entry.querySelector('.license-number').value;
                if (type && number) {
                    customer.licenses.push({ type, number });
                }
            });
            
            // Save to storage
            const customers = await loadCustomerData();
            
            // Update existing or add new
            const existingIndex = customers.findIndex(c => c.name.toLowerCase() === name.toLowerCase());
            if (existingIndex !== -1) {
                customers[existingIndex] = customer;
            } else {
                customers.push(customer);
            }
            
            await saveCustomerData(customers);
            await selectCustomer(customer.name); // Pass the name string, and await it
            closeCustomerForm();
            showMessage('Success', 'Customer saved successfully');
        } // Function: saveCustomer - Complete

        // Add this function to initialize autofill for all existing rows
        function initializeAutofill() {
            // Initialize for all existing medicine rows
            document.querySelectorAll('.medicine-row').forEach(row => {
                initializeAutofillForRow(row);
            });
            
            // Initialize customer suggestions
            const customerInput = document.getElementById('customer-name');
            if (customerInput) {
                customerInput.addEventListener('input', function() {
                    showCustomerSuggestions(this);
                });
            }
        } // Function: initializeAutofill - Complete

        function initializeAutofillForRow(row) {
            const medicineInput = row.querySelector('.medicine-name');
            if (medicineInput) {
                medicineInput.addEventListener('input', function() {
                    showMedicineSuggestions(this);
                });
                medicineInput.addEventListener('keydown', function(e) {
                    handleSuggestionNavigation(e, this);
                });
                medicineInput.addEventListener('focus', function() {
                    showMedicineSuggestions(this);
                });
            }
        } // Function: initializeAutofillForRow - Complete
	


// Get unique customer names from sales data
async function getCustomerNamesFromSalesData() {
    try {
        const csvData = await loadDataFromStorage();
        const rows = csvData.split('\n').filter(row => row.trim() !== '');
        const customerNames = new Set();

        for (let i = 1; i < rows.length; i++) {
            const columns = rows[i].split(',');
            if (columns[0] === 'sale') {
                const name = columns[4].replace(/^"|"$/g, '');
                if (name) customerNames.add(name);
            }
        }
        return Array.from(customerNames);
    } catch (error) {
        console.error('Error loading customer names from sales data:', error);
        return [];
    }
}

// Initial setup when the DOM is fully loaded
document.addEventListener('DOMContentLoaded', async function() {
    // Load medicine names cache for autofill
    await loadMedicineNamesCache();

    const today = new Date();
    const formattedDate = today.toLocaleDateString('en-GB'); // DD/MM/YYYY
    const formattedTime = today.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: true });
    
    document.getElementById('invoice-date2').textContent = formattedDate;
    document.getElementById('invoice-time').textContent = formattedTime;
    document.getElementById('purchase-date').valueAsDate = today;
    document.getElementById('report-from').valueAsDate = new Date(today.getFullYear(), today.getMonth(), 1);
    document.getElementById('report-to').valueAsDate = today;
    document.getElementById('report-stock-date').valueAsDate = today;
    document.getElementById('delete-from-date').valueAsDate = new Date(today.getFullYear(), today.getMonth(), 1);
    document.getElementById('delete-to-date').valueAsDate = today;
    
    // Set QR code path
    document.querySelector('.qr-code img').src = QR_PLACEHOLDER_PATH;

    // Initialize autofill for both default rows
    initializeAutofill();
    
    // Call showPage to initialize the invoice page and load any default reports
    showPage('invoice-page'); // Changed to 'invoice-page'

    document.getElementById('customer-name').addEventListener('input', function() {
        showCustomerSuggestions(this);
    });
});







// Helper function to convert MM/YY to a comparable format (YYMM as number)
function expiryToComparable(expiry) {
    if (!expiry) return 0;
    const [month, year] = expiry.split('/');
    return parseInt(`${year}${month.padStart(2, '0')}`);
}

// Main filter function for Tracker page
async function applyFilters() {
    try {
        // Get filter values
        const typeFilter = document.getElementById('tracker-type').value;
        const medicineFilter = document.getElementById('tracker-medicine-name').value.trim().toLowerCase();
        const customerVendorFilter = document.getElementById('tracker-customer-vendor').value.trim().toLowerCase();
        const batchFilter = document.getElementById('tracker-batch').value.trim().toLowerCase();
        const expiryFilter = document.getElementById('filter-expiry-month-year').value.trim();
        const fromDateFilter = document.getElementById('tracker-from-date').value;
        const toDateFilter = document.getElementById('tracker-to-date').value;

        // Convert expiry filter to comparable format
        const expiryComparable = expiryToComparable(expiryFilter);

        // Load data
        const csvData = await loadDataFromStorage();
        const rows = csvData.split('\n').filter(row => row.trim() !== '');
        const filteredItems = [];
        const tableBody = document.getElementById('tracker-table-body');
        
        // Clear previous results
        tableBody.innerHTML = '';

        // Process each row (skip header)
        for (let i = 1; i < rows.length; i++) {
            const columns = rows[i].split(',');
            if (columns.length < 8) continue;

            const type = columns[0];
            const billNo = columns[1].replace(/^"|"$/g, '');
            const date = columns[2];
            const time = columns[3];
            
            // Determine customer/vendor name based on transaction type
            let customerVendor = '';
            if (type === 'sale') {
                customerVendor = columns[4].replace(/^"|"$/g, '').replace(/""/g, '"');
            } else if (type === 'purchase') {
                customerVendor = columns[14].replace(/^"|"$/g, '').replace(/""/g, '"'); // Vendor name index
            }

            // Apply type filter
            if (typeFilter && type !== typeFilter) continue;
            
            // Apply date filters
            if (fromDateFilter && date < fromDateFilter) continue;
            if (toDateFilter && date > toDateFilter) continue;
            
            // Apply customer/vendor filter
            if (customerVendorFilter && !customerVendor.toLowerCase().includes(customerVendorFilter)) {
                continue;
            }

            // Parse medicines
            let medicinesStr = columns[7];
            if (medicinesStr.startsWith('"') && medicinesStr.endsWith('"')) {
                medicinesStr = medicinesStr.substring(1, medicinesStr.length - 1);
            }
            const medicines = parseMedicinesString(medicinesStr.replace(/""/g, '"'));
            
            // Process each medicine in the transaction
            for (const med of medicines) {
                // Apply medicine name filter
                if (medicineFilter && !med.name.toLowerCase().includes(medicineFilter)) {
                    continue;
                }
                
                // Apply batch filter
                if (batchFilter && (!med.batch || !med.batch.toLowerCase().includes(batchFilter))) {
                    continue;
                }
                
                // Apply expiry filter
                if (expiryFilter && med.expiry) {
                    const medExpiry = expiryToComparable(med.expiry);
                    if (medExpiry > expiryComparable) continue;
                }
                
                // Add to results if all filters passed
                filteredItems.push({
                    date: formatDateForDisplay(date),
                    billNo,
                    type: type === 'sale' ? 'Sale' : 'Purchase',
                    customerVendor,
                    medicine: med.name,
                    batch: med.batch,
                    qty: med.quantity,
                    rate: med.rate,
                    amount: med.amount
                });
            }
        }

        // Populate table
        if (filteredItems.length === 0) {
            tableBody.innerHTML = `<tr><td colspan="9" class="no-results">No matching records found</td></tr>`;
            return;
        }

        filteredItems.forEach(item => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${item.date}</td>
                <td>${item.billNo}</td>
                <td>${item.type}</td>
                <td>${item.customerVendor}</td>
                <td>${item.medicine}</td>
                <td>${item.batch || ''}</td>
                <td>${item.qty}</td>
                <td>${item.rate.toFixed(2)}</td>
                <td>${item.amount.toFixed(2)}</td>
            `;
            tableBody.appendChild(row);
        });

    } catch (error) {
        console.error('Error applying filters:', error);
        showMessage('Filter Error', 'Failed to apply filters: ' + error.message);
    }
}







	</script>
</body>
</html>
